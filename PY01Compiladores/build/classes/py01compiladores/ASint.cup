package py01compiladores;
import java_cup.runtime.*;
import java.util.HashMap; // import the HashMap class
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;
    
    HashMap<String, ArrayList<String>> TablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
    String globalHash = "globalTS";

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 

    
    public void TablaSimbolosToString () throws Exception {
        String text = "";
        for (String key: TablaSimbolos.keySet()) {
            text +=  "Tabla de simbolo : " + key;
            text +=  " : valores: " ;
            for (String item : TablaSimbolos.get(key)) {
                text += item +  "\n"; 
            }
            text += "\n";
        }
        Path currentPath = Paths.get("");
        Path absolutePath = currentPath.toAbsolutePath();
        String currentDirectory = absolutePath.toString(); 
        String path4 = currentDirectory + "\\src\\py01compiladores\\tablaSimbolos.txt";
        //System.out.println(text);
        saveTablaSimbolos(text, path4);

    }
    
    public static void saveTablaSimbolos(String content, String ruta) throws IOException, Exception {
        try {
            FileWriter archivoEscritura = new FileWriter(ruta);
            BufferedWriter escritor = new BufferedWriter(archivoEscritura);
            escritor.write(content);
            escritor.close();
            System.out.println("Cadena guardada en el archivo correctamente.");
        } catch (IOException e) {
            System.err.println("Error al guardar la cadena en el archivo: " + e.getMessage());
        }
    }
:}



/* define how to connect to the scanner! */
//init with {: s.init(); :};
//scan with {: return s.next_token(); :};
init with {::};
scan with {:return lex.next_token();:};


/* Terminals (tokens returned by the scanner). */
terminal            PLUS, PLUSP, MINUS, MINUSM, DIV, POT, MOD, TIMES, INTEGER_LITERAL;
terminal            IDENTIFIER, STRING_LITERAL, STRING_SINGLE, EQEQ, BREAK, EQ;
terminal            GREATERT, LOWERT, GREATERE, LOWERE, NOT, NOTEQUALS, CONJUNTION, DISJUNTION, SEP;
terminal            FLOTANTE, INT, FLOAT, CHAR, STRINGC;
terminal            TRUE,FALSE;
terminal            IF, ELSE, WHILE, FOR, IN, RANGE, SWITCH, CASE;
terminal            GLOB, LOC, RETURN, PRINTF, FUNC, MAIN, PARAM, READ, DEFAULT;
terminal            PARENTA, PARENTC, PARENTCA, PARENTCC, UNDERS;
terminal            ENDLINE, BOOOLEANF, COMA;

/* Non-terminals */
non terminal String PROGRAMA, BODY, STATEMENT, EXP, ASIG, FUNCTION_STATEMENT, EXP_ARIT, VALUE, NUMBERS, EXP_REL, BOOL, LINE, FOR_STATEMENT, WHILE_STATEMENT, IF_STATEMENT, ELSE_STATEMENT, LINER, TERM, FACTOR, OPER_REL, EXP_REL_LOG;
non terminal String EXP_LOG, OPER_LOG, OPERA_LOG, DECL, DECLOC, TYPES, INV_FUNC, PARAMS, PARAMETER, INV_ARRAY, VALUE_LIST, SWITCH_STATEMENT, CASE_LIST, PARAMDECL, EXP_ARIT_INTEGER, TERM_INTEGER, FACTOR_INTEGER;
non terminal String PRINTLN, RETURN_STATEMENT, FUNC_STAT_DEF, BREAK_STATEMENT, INPUT_STATEMENT;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIV;

/* The grammar rules */
start with PROGRAMA;
//Inicial.
PROGRAMA  ::=  {: TablaSimbolos.put(globalHash, new ArrayList<String>()); :}
                BODY
                {: TablaSimbolosToString(); :};

//cuerpo del programa.
BODY ::= BODY STATEMENT | STATEMENT;

//Lineas del codigo.
STATEMENT::= 
     FUNC_STAT_DEF
     | DECL
     | error ENDLINE
     | error UNDERS;

//Lineas recursivas.
LINE::=
      LINER | LINE LINER;
//Cuerpo de los statements.
LINER::=
        ASIG
      | DECLOC
      | DECL
      | FOR_STATEMENT
      | WHILE_STATEMENT
      | SWITCH_STATEMENT
      | IF_STATEMENT
      | EXP
      | PARAMDECL
      | PRINTLN
      | RETURN_STATEMENT
      | BREAK_STATEMENT
      | INPUT_STATEMENT;

//===============================================================================Expresiones Aritmeticas==================================================================
//Numeros
NUMBERS ::= INTEGER_LITERAL | FLOTANTE;
//BOOLEANOS
BOOL ::= TRUE | FALSE;

//Expresiones.
EXP::= EXP_REL_LOG ENDLINE;

//expresiones aritmeticas.
EXP_ARIT    ::= 
              EXP_ARIT    PLUS    TERM
              | EXP_ARIT    MINUS   TERM 
              | TERM;

TERM    ::=    TERM TIMES FACTOR
            |   TERM DIV FACTOR
            |   TERM POT FACTOR
            |   TERM MOD FACTOR
            |   FACTOR;
FACTOR  ::=  PARENTA EXP_ARIT PARENTC
            | MINUS NUMBERS
            | NUMBERS
            | STRING_LITERAL
            | STRING_SINGLE
            | IDENTIFIER
            | IDENTIFIER MINUSM
            | IDENTIFIER PLUSP
            | INV_FUNC
            | INV_ARRAY;

//expresiones aritmeticas.
EXP_ARIT_INTEGER    ::= 
                EXP_ARIT_INTEGER    PLUS    TERM_INTEGER
              | EXP_ARIT_INTEGER    MINUS   TERM_INTEGER  
              | TERM_INTEGER;

TERM_INTEGER    ::=    
                TERM_INTEGER TIMES FACTOR_INTEGER
            |   TERM_INTEGER DIV FACTOR_INTEGER
            |   TERM_INTEGER POT FACTOR_INTEGER
            |   TERM_INTEGER MOD FACTOR_INTEGER
            |   FACTOR_INTEGER;
FACTOR_INTEGER  ::=  PARENTA EXP_ARIT_INTEGER PARENTC
            | NUMBERS
            | IDENTIFIER
            | IDENTIFIER PLUSP
            | IDENTIFIER MINUSM
            | MINUS NUMBERS
            | INV_FUNC
            | INV_ARRAY;

//===============================================================================Expresiones Aritmeticas End==================================================================

//===============================================================================Expresiones relacionales==================================================================
//operaciones relacionales logicas.
EXP_REL_LOG ::= EXP_REL | EXP_LOG;

EXP_REL    ::= EXP_ARIT    OPER_REL    EXP_ARIT 
            | PARENTA EXP_REL PARENTC
            | NOT PARENTA EXP_REL PARENTC
            | MINUS PARENTA EXP_REL_LOG PARENTC
            | BOOL;

//Operador logico.
EXP_LOG ::= OPER_LOG 
          | EXP_REL  OPERA_LOG EXP_REL_LOG
          | PARENTA EXP_REL  OPERA_LOG EXP_REL_LOG PARENTC //parentesis para las expresiones.
          | NOT PARENTA EXP_REL  OPERA_LOG EXP_REL_LOG PARENTC //parentesis para las expresiones.
          | IDENTIFIER OPERA_LOG EXP_REL_LOG
          | PARENTA IDENTIFIER  OPERA_LOG EXP_REL_LOG PARENTC //parentesis para los identificadores.
          | NOT PARENTA IDENTIFIER  OPERA_LOG EXP_REL_LOG PARENTC; //parentesis para los identificadores.

//operando logico.
OPER_LOG ::= EXP_ARIT;

//Operadores relacionales.
OPER_REL ::= GREATERT | GREATERE |  LOWERT | LOWERE | EQEQ | NOTEQUALS;
OPERA_LOG ::= DISJUNTION | CONJUNTION;
//===============================================================================Expresiones Relacionales End==================================================================

//===============================================================================Asignaciones y declaraciones==================================================================
//Asignacion de valores a una variable.
ASIG::= IDENTIFIER EQ VALUE ENDLINE;

DECL::= GLOB SEP TYPES:tglob SEP IDENTIFIER:ID ENDLINE {: TablaSimbolos.get(globalHash).add("variableGLob: " + ID.toString() + ":" + tglob.toString()); :};

DECL::= GLOB SEP TYPES:tglob SEP IDENTIFIER:ID EQ VALUE ENDLINE {: TablaSimbolos.get(globalHash).add("variableGLob: " + ID.toString() + ":" + tglob.toString()); :};

DECL ::= GLOB SEP TYPES:tglob SEP IDENTIFIER:ID PARENTCA INTEGER_LITERAL PARENTCC ENDLINE {: TablaSimbolos.get(currentHash).add("array: " + ID.toString() + ":" + tglob.toString()); :};

DECL ::= GLOB SEP TYPES:tglob SEP IDENTIFIER:ID PARENTCA INTEGER_LITERAL PARENTCC EQ VALUE_LIST ENDLINE  {: TablaSimbolos.get(currentHash).add("array : "+ ID.toString() + ":" + tglob.toString()); :};

DECLOC::= LOC SEP TYPES:tloc SEP IDENTIFIER:ID ENDLINE {: TablaSimbolos.get(currentHash).add("variableLoc: " + ID.toString() + ":" + tloc.toString()); :};

DECLOC::= LOC SEP TYPES:tloc SEP IDENTIFIER:ID EQ VALUE ENDLINE {: TablaSimbolos.get(currentHash).add("variableLoc: " + ID.toString() + ":" + tloc.toString()); :};

DECLOC ::= LOC SEP TYPES:tloc SEP IDENTIFIER:ID PARENTCA INTEGER_LITERAL PARENTCC ENDLINE {: TablaSimbolos.get(currentHash).add("array: " + ID.toString() + ":" + tloc.toString()); :};

DECLOC ::= LOC SEP TYPES:tloc SEP IDENTIFIER:ID PARENTCA INTEGER_LITERAL PARENTCC EQ VALUE_LIST ENDLINE  {: TablaSimbolos.get(currentHash).add("array : "+ ID.toString() + ":" + tloc.toString()); :};

TYPES::= CHAR {: RESULT = "char"; :} 
        | FLOAT {: RESULT = "float"; :}
        | STRINGC {: RESULT = "String"; :}
        | INT {: RESULT = "int"; :}
        | BOOOLEANF {: RESULT = "bool"; :};

//posibles valores que puede tener una asignacion.
VALUE::= EXP_REL_LOG;
//===============================================================================Asignaciones y declaraciones End==================================================================


//===============================================================================Funcion==================================================================
//Declaracion de funciones.
FUNCTION_STATEMENT::= FUNC SEP INT SEP MAIN {:
                                                         String tipo;
                                                         tipo = "tipo:Main:int";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = "main";
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                            :};

FUNCTION_STATEMENT::= FUNC SEP INT SEP IDENTIFIER:ID  {: String tipo;
                                                         tipo = "tipo:func:int";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    :};

FUNCTION_STATEMENT::= FUNC SEP FLOAT SEP IDENTIFIER:ID {: String tipo;
                                                         tipo = "tipo:func:float";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    :};

FUNCTION_STATEMENT::= FUNC SEP BOOOLEANF SEP IDENTIFIER:ID  {: String tipo;
                                                         tipo = "tipo:func:bool";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    :};

FUNCTION_STATEMENT::= FUNC SEP CHAR SEP IDENTIFIER:ID  {: String tipo;
                                                         tipo = "tipo:func:char";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    :};

FUNCTION_STATEMENT::= FUNC SEP STRINGC SEP IDENTIFIER:ID  {: String tipo;
                                                         tipo = "tipo:func:String";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    :};

FUNC_STAT_DEF ::= FUNCTION_STATEMENT UNDERS LINE UNDERS;



INV_FUNC ::= IDENTIFIER PARENTA PARENTC;
INV_FUNC ::= IDENTIFIER PARENTA PARAMS PARENTC;

PARAMS ::= PARAMETER COMA PARAMS;
PARAMS ::= PARAMETER;

PARAMETER ::= VALUE;

PARAMDECL ::= PARAM SEP TYPES:tparam SEP IDENTIFIER:ID ENDLINE {: TablaSimbolos.get(currentHash).add("parametro : "+ ID.toString() + ":" + tparam.toString()); :};

//Invocaciones de un array
INV_ARRAY ::= IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC;
VALUE_LIST ::= VALUE COMA VALUE_LIST | VALUE;


PRINTLN ::= PRINTF PARENTA PARENTC ENDLINE;
PRINTLN ::= PRINTF PARENTA STRING_LITERAL PARENTC ENDLINE;
PRINTLN ::= PRINTF PARENTA STRING_SINGLE PARENTC ENDLINE;
PRINTLN ::= PRINTF PARENTA IDENTIFIER PARENTC ENDLINE;

INPUT_STATEMENT ::= READ PARENTA IDENTIFIER PARENTC ENDLINE; 


//===============================================================================Funciones End==================================================================


//===============================================================================Estructuras de control==================================================================
//Declaracion de IF.
IF_STATEMENT ::= IF PARENTA EXP_REL_LOG PARENTC UNDERS LINE UNDERS ELSE_STATEMENT;

ELSE_STATEMENT ::= ELSE UNDERS LINE UNDERS | ;

WHILE_STATEMENT ::= WHILE PARENTA EXP_REL_LOG PARENTC UNDERS LINE UNDERS;

FOR_STATEMENT ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT_INTEGER PARENTC UNDERS LINE UNDERS;
FOR_STATEMENT ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT_INTEGER COMA EXP_ARIT_INTEGER PARENTC UNDERS LINE UNDERS;
FOR_STATEMENT ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT_INTEGER COMA EXP_ARIT_INTEGER COMA EXP_ARIT_INTEGER PARENTC UNDERS LINE UNDERS;

SWITCH_STATEMENT ::= SWITCH PARENTA IDENTIFIER PARENTC UNDERS CASE_LIST UNDERS;

CASE_LIST ::= CASE EXP_ARIT SEP LINE CASE_LIST | CASE EXP_ARIT SEP LINE | DEFAULT SEP LINE | DEFAULT SEP;



//===============================================================================Estructuras de control End==================================================================

//===============================================================================Return==================================================================
RETURN_STATEMENT ::=  RETURN ENDLINE;
RETURN_STATEMENT ::=  RETURN SEP VALUE ENDLINE;

BREAK_STATEMENT ::=  BREAK ENDLINE;


//===============================================================================Return==================================================================




