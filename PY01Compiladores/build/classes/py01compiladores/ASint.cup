package py01compiladores;
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 
:}

/* define how to connect to the scanner! */
//init with {: s.init(); :};
//scan with {: return s.next_token(); :};
init with {::};
scan with {:return lex.next_token();:};


/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, PLUSP, MINUS, MINUSM, DIV, POT, MOD, TIMES, UMINUS, LPAREN, RPAREN, INTEGER_LITERAL;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal            IDENTIFIER, STRING_LITERAL, EQEQ, BREAK, BOOLEAN, ABSTRACT, EQ, DOT;
terminal            GREATERT, LOWERT, GREATERE, LOWERE, NOT, NOTEQUALS, CONJUNTION, DISJUNTION, SEP;
terminal            FLOTANTE, ENTERO, INT, FLOAT, CHAR, CHARC, STRING, ARRAY;
terminal            TRUE,FALSE;
terminal            IF, ELSE, WHILE, FOR, IN, RANGE, SWICH, CASE;
terminal            GLOB, LOC, RETURN, PRINTF, FUNC, MAIN, PARAM, READ, DEFAULT;
terminal            PARENTA, PARENTC, PARENTCA, PARENTCC, UNDERS;
terminal            ENDLINE;
terminal            SEMICOLON;

/* Non-terminals */
non terminal expr_list;
non terminal Integer expr; // used to store evaluated subexpressions
non terminal String PROGRAMA, BODY, STATEMENT, EXP, ASIG, FUNCTION_STATEMENT, EXP_ARIT, VALUE, NUMBERS, EXP_COMP, BOOL, LINE, IF_STATEMENT, LINER;


/* Precedences */

precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIV;
precedence left UMINUS;

/* The grammar rules */
start with PROGRAMA;
//Inicial.
PROGRAMA  ::= BODY;

//cuerpo del programa.
BODY ::= BODY STATEMENT | STATEMENT;

//Lineas del codigo.
STATEMENT::= 
      LINER
     | FUNCTION_STATEMENT
     | error ENDLINE
     | error UNDERS;

//Lineas recursivas.
LINE::=
      LINER | LINE LINER;
//Cuerpo de los statements.
LINER::=
        ASIG 
      | IF_STATEMENT
      | EXP;


//Numeros
NUMBERS ::= INTEGER_LITERAL | FLOTANTE;
//BOOLEANOS
BOOL ::= TRUE | FALSE;

//Expresiones.
EXP::= EXP_ARIT ENDLINE {:System.out.println("here");:} ;

//expresiones aritmeticas.
EXP_ARIT    ::= EXP_ARIT PLUS EXP_ARIT {: System.out.println("+");:}
         | EXP_ARIT MINUS EXP_ARIT {: System.out.println("-");:} 
         | EXP_ARIT TIMES EXP_ARIT {: System.out.println("*");:}
         | EXP_ARIT DIV EXP_ARIT {: System.out.println("/");:}
         | NUMBERS ;

//expresiones de comparacion.
EXP_COMP    ::= EXP_ARIT  GREATERT EXP_ARIT
            |   EXP_ARIT LOWERT EXP_ARIT
            |   EXP_ARIT GREATERE EXP_ARIT
            |   EXP_ARIT LOWERE EXP_ARIT
            |   EXP_ARIT EQ EXP_ARIT
            |   BOOL;


//Asignacion de valores a una variable.
ASIG::= IDENTIFIER EQ VALUE ENDLINE {: System.out.println("Asignacion int "); :};

//posibles valores que puede tener una asignacion.
VALUE::= 
         STRING_LITERAL{: System.out.println("Asignacion String "); :}
        | EXP_COMP  {: System.out.println("Asignacion expresion de comp "); :}
        | EXP_ARIT {: System.out.println("Asignacion exp "); :};

//Declaracion de funciones.
FUNCTION_STATEMENT::= FUNC SEP INT SEP MAIN UNDERS LINE UNDERS {: System.out.println("Main"); :};
FUNCTION_STATEMENT::= FUNC SEP INT SEP IDENTIFIER UNDERS LINE UNDERS {: System.out.println("declaracion de funcion"); :};

//Declaracion de IF.
IF_STATEMENT ::= IF PARENTA EXP_COMP PARENTC UNDERS LINE UNDERS {: System.out.println("if statement"); :};
IF_STATEMENT ::= IF PARENTA EXP_ARIT PARENTC UNDERS LINE UNDERS {: System.out.println("if statement"); :};