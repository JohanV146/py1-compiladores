
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package py01compiladores;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\055\002\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\015\003\000\002\015\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\012\003\000\002" +
    "\012\003\000\002\014\003\000\002\014\003\000\002\005" +
    "\004\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\004\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\004\000\002\024\004" +
    "\000\002\024\003\000\002\024\003\000\002\045\005\000" +
    "\002\045\005\000\002\045\003\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\003\000\002\047\005\000\002\047\003\000\002\047\003" +
    "\000\002\047\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\003\000\002\047\003\000\002\026\003\000\002" +
    "\026\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\006\000\002\013\006\000\002\013\003\000\002\027\003" +
    "\000\002\027\005\000\002\027\007\000\002\027\010\000" +
    "\002\027\005\000\002\027\007\000\002\027\010\000\002" +
    "\030\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\031\003\000\002\031\003\000\002\006\006\000" +
    "\002\032\010\000\002\032\012\000\002\032\013\000\002" +
    "\032\015\000\002\033\010\000\002\033\012\000\002\033" +
    "\013\000\002\033\015\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\011\003\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\052\006\000\002\035\005\000\002\035\006" +
    "\000\002\036\005\000\002\036\003\000\002\037\003\000" +
    "\002\044\010\000\002\040\006\000\002\041\005\000\002" +
    "\041\003\000\002\050\006\000\002\050\007\000\002\050" +
    "\007\000\002\050\007\000\002\054\007\000\002\020\012" +
    "\000\002\021\006\000\002\021\002\000\002\017\011\000" +
    "\002\016\017\000\002\016\021\000\002\016\023\000\002" +
    "\042\011\000\002\043\007\000\002\043\006\000\002\043" +
    "\005\000\002\043\004\000\002\051\004\000\002\051\006" +
    "\000\002\053\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\010\003\000\053\000\057\000\001\002\000" +
    "\010\003\011\053\012\057\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\033\u0123\001" +
    "\002\000\012\002\ufffd\003\ufffd\053\ufffd\057\ufffd\001\002" +
    "\000\006\070\u0122\071\u0121\001\002\000\004\033\u0112\001" +
    "\002\000\004\070\020\001\002\000\012\002\uffff\003\011" +
    "\053\012\057\007\001\002\000\012\002\ufffb\003\ufffb\053" +
    "\ufffb\057\ufffb\001\002\000\012\002\ufffc\003\ufffc\053\ufffc" +
    "\057\ufffc\001\002\000\012\002\ufffe\003\ufffe\053\ufffe\057" +
    "\ufffe\001\002\000\054\006\031\014\075\015\076\016\023" +
    "\017\053\021\056\027\034\034\074\041\051\042\072\043" +
    "\041\045\067\046\030\051\060\053\012\054\064\055\050" +
    "\056\057\061\033\062\065\064\046\001\002\000\062\006" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3\027\ufff3" +
    "\034\ufff3\041\ufff3\042\ufff3\043\ufff3\045\ufff3\046\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\070\ufff3\001\002\000\046\004" +
    "\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\020\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\065\uffd4\071\uffd4\073\uffd4\001\002\000\046" +
    "\004\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\020" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\065\uffd9\071\uffd9\073\uffd9\001\002\000" +
    "\062\006\uffee\014\uffee\015\uffee\016\uffee\017\uffee\021\uffee" +
    "\027\uffee\034\uffee\041\uffee\042\uffee\043\uffee\045\uffee\046" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\061\uffee\062\uffee\063\uffee\064\uffee\070\uffee\001\002\000" +
    "\062\006\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1" +
    "\027\ufff1\034\ufff1\041\ufff1\042\ufff1\043\ufff1\045\ufff1\046" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\070\ufff1\001\002\000" +
    "\062\006\uffed\014\uffed\015\uffed\016\uffed\017\uffed\021\uffed" +
    "\027\uffed\034\uffed\041\uffed\042\uffed\043\uffed\045\uffed\046" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\061\uffed\062\uffed\063\uffed\064\uffed\070\uffed\001\002\000" +
    "\010\065\uffbb\071\uffbb\073\uffbb\001\002\000\004\033\341" +
    "\001\002\000\010\014\075\034\074\064\336\001\002\000" +
    "\062\006\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4" +
    "\027\ufff4\034\ufff4\041\ufff4\042\ufff4\043\ufff4\045\ufff4\046" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\064\ufff4\070\ufff4\001\002\000" +
    "\004\033\331\001\002\000\004\064\320\001\002\000\010" +
    "\065\uffc1\071\uffc1\073\uffc1\001\002\000\014\031\uffbc\032" +
    "\uffbc\065\uffbc\071\uffbc\073\uffbc\001\002\000\030\004\137" +
    "\006\140\020\267\023\270\024\273\025\274\026\272\030" +
    "\271\065\uffb4\071\uffb4\073\uffb4\001\002\000\062\006\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5\027\ufff5\034" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\070\ufff5\001\002\000\004\064\305" +
    "\001\002\000\046\004\uffdd\006\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\065\uffdd\071\uffdd\073" +
    "\uffdd\001\002\000\062\006\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\021\uffef\027\uffef\034\uffef\041\uffef\042\uffef\043" +
    "\uffef\045\uffef\046\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\056\uffef\061\uffef\062\uffef\063\uffef\064\uffef\070" +
    "\uffef\001\002\000\046\004\uffda\006\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\020\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\065\uffda\071\uffda" +
    "\073\uffda\001\002\000\062\006\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\021\ufff0\027\ufff0\034\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\045\ufff0\046\ufff0\051\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\070\ufff0\001\002\000\026\006\031\014\075\015\255\016" +
    "\023\017\053\027\254\034\074\041\051\042\072\064\257" +
    "\001\002\000\062\006\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\021\ufff6\027\ufff6\034\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\045\ufff6\046\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\070\ufff6" +
    "\001\002\000\006\033\250\071\251\001\002\000\014\031" +
    "\uffe7\032\uffe7\065\uffe7\071\uffe7\073\uffe7\001\002\000\062" +
    "\006\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2\027" +
    "\ufff2\034\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\070\ufff2\001\002\000\046" +
    "\004\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\020" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\065\uffd8\071\uffd8\073\uffd8\001\002\000" +
    "\056\006\031\014\075\015\076\016\023\017\053\021\056" +
    "\027\034\034\074\041\051\042\072\043\041\045\067\046" +
    "\030\051\060\053\012\054\064\055\050\056\057\061\033" +
    "\062\065\064\046\070\247\001\002\000\004\071\246\001" +
    "\002\000\004\071\245\001\002\000\004\064\231\001\002" +
    "\000\004\064\213\001\002\000\062\006\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\021\uffec\027\uffec\034\uffec\041\uffec" +
    "\042\uffec\043\uffec\045\uffec\046\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\070\uffec\001\002\000\062\006\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\021\uffea\027\uffea\034\uffea\041\uffea" +
    "\042\uffea\043\uffea\045\uffea\046\uffea\051\uffea\052\uffea\053" +
    "\uffea\054\uffea\055\uffea\056\uffea\061\uffea\062\uffea\063\uffea" +
    "\064\uffea\070\uffea\001\002\000\046\004\uffd3\006\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\020\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\065" +
    "\uffd3\071\uffd3\073\uffd3\001\002\000\004\033\164\001\002" +
    "\000\004\064\160\001\002\000\062\006\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\021\ufff8\027\ufff8\034\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\045\ufff8\046\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\070\ufff8\001\002\000\004\064\151\001\002\000" +
    "\014\031\077\032\101\065\uffc2\071\uffc2\073\uffc2\001\002" +
    "\000\062\006\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\027\uffeb\034\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb" +
    "\046\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\070\uffeb\001\002" +
    "\000\014\031\uffe6\032\uffe6\065\uffe6\071\uffe6\073\uffe6\001" +
    "\002\000\046\004\uffe2\006\uffe2\010\127\011\126\012\125" +
    "\013\130\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\065\uffe2\071\uffe2\073\uffe2" +
    "\001\002\000\046\004\uffe8\006\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\065\uffe8\071\uffe8\073" +
    "\uffe8\001\002\000\046\004\uffe9\006\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\020\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\065\uffe9\071\uffe9" +
    "\073\uffe9\001\002\000\052\004\uffd7\005\105\006\uffd7\007" +
    "\106\010\uffd7\011\uffd7\012\uffd7\013\uffd7\020\uffd7\022\100" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\077\032" +
    "\101\064\102\066\103\071\uffd7\001\002\000\026\006\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\027\uffac\034\uffac\041" +
    "\uffac\042\uffac\064\uffac\001\002\000\026\006\031\014\075" +
    "\015\107\016\023\017\053\027\034\034\074\041\051\042" +
    "\072\064\046\001\002\000\026\006\uffad\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\027\uffad\034\uffad\041\uffad\042\uffad\064" +
    "\uffad\001\002\000\030\006\031\014\075\015\107\016\023" +
    "\017\053\027\034\034\074\041\051\042\072\064\046\065" +
    "\117\001\002\000\004\014\111\001\002\000\026\006\031" +
    "\014\075\015\107\016\023\017\053\027\034\034\074\041" +
    "\051\042\072\064\046\001\002\000\046\004\uffd5\006\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\020\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\065\uffd5\071\uffd5\073\uffd5\001\002\000\046\004\uffd6\006" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\020\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\065\uffd6\071\uffd6\073\uffd6\001\002\000\054\004\uffd7" +
    "\005\105\006\uffd7\007\106\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7" +
    "\031\077\032\101\064\102\065\uffd7\066\103\071\uffd7\073" +
    "\uffd7\001\002\000\010\065\uffb7\071\uffb7\073\uffb7\001\002" +
    "\000\004\067\112\001\002\000\046\004\uff8f\006\uff8f\010" +
    "\uff8f\011\uff8f\012\uff8f\013\uff8f\020\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\065" +
    "\uff8f\071\uff8f\073\uff8f\001\002\000\006\065\uff91\073\uff91" +
    "\001\002\000\004\065\122\001\002\000\006\065\uff92\073" +
    "\120\001\002\000\010\065\uff9d\071\uff9d\073\uff9d\001\002" +
    "\000\046\004\uff95\006\uff95\010\uff95\011\uff95\012\uff95\013" +
    "\uff95\020\uff95\023\uff95\024\uff95\025\uff95\026\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\065\uff95\071\uff95\073\uff95\001" +
    "\002\000\026\006\031\014\075\015\107\016\023\017\053" +
    "\027\034\034\074\041\051\042\072\064\046\001\002\000" +
    "\004\065\uff93\001\002\000\046\004\uff94\006\uff94\010\uff94" +
    "\011\uff94\012\uff94\013\uff94\020\uff94\023\uff94\024\uff94\025" +
    "\uff94\026\uff94\030\uff94\031\uff94\032\uff94\033\uff94\065\uff94" +
    "\071\uff94\073\uff94\001\002\000\004\071\124\001\002\000" +
    "\062\006\uffab\014\uffab\015\uffab\016\uffab\017\uffab\021\uffab" +
    "\027\uffab\034\uffab\041\uffab\042\uffab\043\uffab\045\uffab\046" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab" +
    "\061\uffab\062\uffab\063\uffab\064\uffab\070\uffab\001\002\000" +
    "\020\006\131\014\075\015\133\016\023\017\053\034\074" +
    "\064\134\001\002\000\020\006\131\014\075\015\133\016" +
    "\023\017\053\034\074\064\134\001\002\000\020\006\131" +
    "\014\075\015\133\016\023\017\053\034\074\064\134\001" +
    "\002\000\020\006\131\014\075\015\133\016\023\017\053" +
    "\034\074\064\134\001\002\000\006\014\075\034\074\001" +
    "\002\000\046\004\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\020\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\065\uffe1\071\uffe1\073\uffe1" +
    "\001\002\000\056\004\uffd7\005\105\006\uffd7\007\106\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\020\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\064" +
    "\102\065\uffd7\066\103\071\uffd7\073\uffd7\001\002\000\020" +
    "\006\131\014\075\015\133\016\023\017\053\034\074\064" +
    "\134\001\002\000\010\004\137\006\140\065\136\001\002" +
    "\000\046\004\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\065\uffdc\071\uffdc\073\uffdc\001" +
    "\002\000\020\006\131\014\075\015\133\016\023\017\053" +
    "\034\074\064\134\001\002\000\020\006\131\014\075\015" +
    "\133\016\023\017\053\034\074\064\134\001\002\000\046" +
    "\004\uffe3\006\uffe3\010\127\011\126\012\125\013\130\020" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\065\uffe3\071\uffe3\073\uffe3\001\002\000" +
    "\046\004\uffe4\006\uffe4\010\127\011\126\012\125\013\130" +
    "\020\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\065\uffe4\071\uffe4\073\uffe4\001\002" +
    "\000\046\004\uffdb\006\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\065\uffdb\071\uffdb\073\uffdb\001" +
    "\002\000\046\004\uffe0\006\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\020\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\065\uffe0\071\uffe0\073\uffe0" +
    "\001\002\000\046\004\uffdf\006\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\065\uffdf\071\uffdf\073" +
    "\uffdf\001\002\000\046\004\uffde\006\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\020\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\065\uffde\071\uffde" +
    "\073\uffde\001\002\000\026\006\031\014\075\015\107\016" +
    "\023\017\053\027\034\034\074\041\051\042\072\064\046" +
    "\001\002\000\010\065\uffba\071\uffba\073\uffba\001\002\000" +
    "\026\006\031\014\075\015\107\016\023\017\053\027\034" +
    "\034\074\041\051\042\072\064\046\001\002\000\004\065" +
    "\153\001\002\000\004\070\154\001\002\000\054\006\031" +
    "\014\075\015\076\016\023\017\053\021\056\027\034\034" +
    "\074\041\051\042\072\043\041\045\067\046\030\051\060" +
    "\053\012\054\064\055\050\056\057\061\033\062\065\064" +
    "\046\001\002\000\056\006\031\014\075\015\076\016\023" +
    "\017\053\021\056\027\034\034\074\041\051\042\072\043" +
    "\041\045\067\046\030\051\060\053\012\054\064\055\050" +
    "\056\057\061\033\062\065\064\046\070\157\001\002\000" +
    "\062\006\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7" +
    "\027\ufff7\034\ufff7\041\ufff7\042\ufff7\043\ufff7\045\ufff7\046" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\064\ufff7\070\ufff7\001\002\000" +
    "\062\006\uff84\014\uff84\015\uff84\016\uff84\017\uff84\021\uff84" +
    "\027\uff84\034\uff84\041\uff84\042\uff84\043\uff84\045\uff84\046" +
    "\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84" +
    "\061\uff84\062\uff84\063\uff84\064\uff84\070\uff84\001\002\000" +
    "\004\015\161\001\002\000\004\065\162\001\002\000\004" +
    "\071\163\001\002\000\062\006\uff88\014\uff88\015\uff88\016" +
    "\uff88\017\uff88\021\uff88\027\uff88\034\uff88\041\uff88\042\uff88" +
    "\043\uff88\045\uff88\046\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\uff88\056\uff88\061\uff88\062\uff88\063\uff88\064\uff88" +
    "\070\uff88\001\002\000\014\035\172\036\171\037\170\040" +
    "\165\072\166\001\002\000\004\033\uffa0\001\002\000\004" +
    "\033\uff9e\001\002\000\004\033\173\001\002\000\004\033" +
    "\uffa2\001\002\000\004\033\uffa1\001\002\000\004\033\uff9f" +
    "\001\002\000\004\015\174\001\002\000\010\022\175\066" +
    "\177\071\176\001\002\000\026\006\031\014\075\015\107" +
    "\016\023\017\053\027\034\034\074\041\051\042\072\064" +
    "\046\001\002\000\062\006\uffa6\014\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\021\uffa6\027\uffa6\034\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\045\uffa6\046\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\056\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\070" +
    "\uffa6\001\002\000\004\014\200\001\002\000\004\067\201" +
    "\001\002\000\006\022\202\071\203\001\002\000\026\006" +
    "\031\014\075\015\107\016\023\017\053\027\034\034\074" +
    "\041\051\042\072\064\046\001\002\000\062\006\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4\027\uffa4\034\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\045\uffa4\046\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\070\uffa4\001\002\000\006\071\uff8d\073" +
    "\207\001\002\000\004\071\206\001\002\000\062\006\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\021\uffa3\027\uffa3\034" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\045\uffa3\046\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\070\uffa3\001\002\000\026\006\031" +
    "\014\075\015\107\016\023\017\053\027\034\034\074\041" +
    "\051\042\072\064\046\001\002\000\004\071\uff8e\001\002" +
    "\000\004\071\212\001\002\000\062\006\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\021\uffa5\027\uffa5\034\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\045\uffa5\046\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\070\uffa5\001\002\000\004\015\214\001\002\000" +
    "\004\065\215\001\002\000\004\070\216\001\002\000\006" +
    "\052\221\063\217\001\002\000\004\033\227\001\002\000" +
    "\004\070\226\001\002\000\020\006\131\014\075\015\133" +
    "\016\023\017\053\034\074\064\134\001\002\000\010\004" +
    "\137\006\140\033\223\001\002\000\054\006\031\014\075" +
    "\015\076\016\023\017\053\021\056\027\034\034\074\041" +
    "\051\042\072\043\041\045\067\046\030\051\060\053\012" +
    "\054\064\055\050\056\057\061\033\062\065\064\046\001" +
    "\002\000\062\006\031\014\075\015\076\016\023\017\053" +
    "\021\056\027\034\034\074\041\051\042\072\043\041\045" +
    "\067\046\030\051\060\052\221\053\012\054\064\055\050" +
    "\056\057\061\033\062\065\063\217\064\046\070\uff7e\001" +
    "\002\000\004\070\uff7f\001\002\000\062\006\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\021\uff80\027\uff80\034\uff80\041" +
    "\uff80\042\uff80\043\uff80\045\uff80\046\uff80\051\uff80\052\uff80" +
    "\053\uff80\054\uff80\055\uff80\056\uff80\061\uff80\062\uff80\063" +
    "\uff80\064\uff80\070\uff80\001\002\000\056\006\031\014\075" +
    "\015\076\016\023\017\053\021\056\027\034\034\074\041" +
    "\051\042\072\043\041\045\067\046\030\051\060\053\012" +
    "\054\064\055\050\056\057\061\033\062\065\064\046\070" +
    "\uff7c\001\002\000\056\006\031\014\075\015\076\016\023" +
    "\017\053\021\056\027\034\034\074\041\051\042\072\043" +
    "\041\045\067\046\030\051\060\053\012\054\064\055\050" +
    "\056\057\061\033\062\065\064\046\070\uff7d\001\002\000" +
    "\012\015\234\016\235\017\232\065\233\001\002\000\004" +
    "\065\243\001\002\000\004\071\242\001\002\000\004\065" +
    "\240\001\002\000\004\065\236\001\002\000\004\071\237" +
    "\001\002\000\062\006\uff8b\014\uff8b\015\uff8b\016\uff8b\017" +
    "\uff8b\021\uff8b\027\uff8b\034\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\045\uff8b\046\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055" +
    "\uff8b\056\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\070\uff8b" +
    "\001\002\000\004\071\241\001\002\000\062\006\uff89\014" +
    "\uff89\015\uff89\016\uff89\017\uff89\021\uff89\027\uff89\034\uff89" +
    "\041\uff89\042\uff89\043\uff89\045\uff89\046\uff89\051\uff89\052" +
    "\uff89\053\uff89\054\uff89\055\uff89\056\uff89\061\uff89\062\uff89" +
    "\063\uff89\064\uff89\070\uff89\001\002\000\062\006\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c\027\uff8c\034\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\045\uff8c\046\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\070\uff8c\001\002\000\004\071\244\001" +
    "\002\000\062\006\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a" +
    "\021\uff8a\027\uff8a\034\uff8a\041\uff8a\042\uff8a\043\uff8a\045" +
    "\uff8a\046\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\070\uff8a\001" +
    "\002\000\062\006\uff79\014\uff79\015\uff79\016\uff79\017\uff79" +
    "\021\uff79\027\uff79\034\uff79\041\uff79\042\uff79\043\uff79\045" +
    "\uff79\046\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79" +
    "\056\uff79\061\uff79\062\uff79\063\uff79\064\uff79\070\uff79\001" +
    "\002\000\062\006\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\021\uffe5\027\uffe5\034\uffe5\041\uffe5\042\uffe5\043\uffe5\045" +
    "\uffe5\046\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\070\uffe5\001" +
    "\002\000\012\002\uff96\003\uff96\053\uff96\057\uff96\001\002" +
    "\000\026\006\031\014\075\015\107\016\023\017\053\027" +
    "\034\034\074\041\051\042\072\064\046\001\002\000\062" +
    "\006\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\021\uff7b\027" +
    "\uff7b\034\uff7b\041\uff7b\042\uff7b\043\uff7b\045\uff7b\046\uff7b" +
    "\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\061" +
    "\uff7b\062\uff7b\063\uff7b\064\uff7b\070\uff7b\001\002\000\004" +
    "\071\253\001\002\000\062\006\uff7a\014\uff7a\015\uff7a\016" +
    "\uff7a\017\uff7a\021\uff7a\027\uff7a\034\uff7a\041\uff7a\042\uff7a" +
    "\043\uff7a\045\uff7a\046\uff7a\051\uff7a\052\uff7a\053\uff7a\054" +
    "\uff7a\055\uff7a\056\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a" +
    "\070\uff7a\001\002\000\004\064\301\001\002\000\050\004" +
    "\uffd7\005\105\006\uffd7\007\106\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\031\077\032\101\064\102\065\uffd7\066\103\001\002" +
    "\000\024\004\137\006\140\020\267\023\270\024\273\025" +
    "\274\026\272\030\271\065\136\001\002\000\026\006\031" +
    "\014\075\015\133\016\023\017\053\027\254\034\074\041" +
    "\051\042\072\064\257\001\002\000\010\031\077\032\101" +
    "\065\261\001\002\000\014\031\uffbf\032\uffbf\065\uffbf\071" +
    "\uffbf\073\uffbf\001\002\000\026\006\031\014\075\015\107" +
    "\016\023\017\053\027\034\034\074\041\051\042\072\064" +
    "\046\001\002\000\004\065\264\001\002\000\010\065\uffb9" +
    "\071\uffb9\073\uffb9\001\002\000\004\065\261\001\002\000" +
    "\020\006\131\014\075\015\133\016\023\017\053\034\074" +
    "\064\134\001\002\000\020\006\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\034\uffaf\064\uffaf\001\002\000\020\006\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\034\uffb3\064\uffb3\001" +
    "\002\000\020\006\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\034\uffae\064\uffae\001\002\000\020\006\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\034\uffb0\064\uffb0\001\002\000\020" +
    "\006\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\034\uffb1\064" +
    "\uffb1\001\002\000\020\006\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\034\uffb2\064\uffb2\001\002\000\020\004\137\006" +
    "\140\031\uffc0\032\uffc0\065\uffc0\071\uffc0\073\uffc0\001\002" +
    "\000\026\006\031\014\075\015\107\016\023\017\053\027" +
    "\034\034\074\041\051\042\072\064\046\001\002\000\004" +
    "\065\300\001\002\000\010\065\uffb6\071\uffb6\073\uffb6\001" +
    "\002\000\026\006\031\014\075\015\133\016\023\017\053" +
    "\027\254\034\074\041\051\042\072\064\257\001\002\000" +
    "\022\004\137\006\140\020\267\023\270\024\273\025\274" +
    "\026\272\030\271\001\002\000\004\065\304\001\002\000" +
    "\014\031\uffbe\032\uffbe\065\uffbe\071\uffbe\073\uffbe\001\002" +
    "\000\026\006\031\014\075\015\107\016\023\017\053\027" +
    "\034\034\074\041\051\042\072\064\046\001\002\000\004" +
    "\065\307\001\002\000\004\070\310\001\002\000\054\006" +
    "\031\014\075\015\076\016\023\017\053\021\056\027\034" +
    "\034\074\041\051\042\072\043\041\045\067\046\030\051" +
    "\060\053\012\054\064\055\050\056\057\061\033\062\065" +
    "\064\046\001\002\000\056\006\031\014\075\015\076\016" +
    "\023\017\053\021\056\027\034\034\074\041\051\042\072" +
    "\043\041\045\067\046\030\051\060\053\012\054\064\055" +
    "\050\056\057\061\033\062\065\064\046\070\312\001\002" +
    "\000\064\006\uff85\014\uff85\015\uff85\016\uff85\017\uff85\021" +
    "\uff85\027\uff85\034\uff85\041\uff85\042\uff85\043\uff85\044\313" +
    "\045\uff85\046\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055" +
    "\uff85\056\uff85\061\uff85\062\uff85\063\uff85\064\uff85\070\uff85" +
    "\001\002\000\004\070\315\001\002\000\062\006\uff87\014" +
    "\uff87\015\uff87\016\uff87\017\uff87\021\uff87\027\uff87\034\uff87" +
    "\041\uff87\042\uff87\043\uff87\045\uff87\046\uff87\051\uff87\052" +
    "\uff87\053\uff87\054\uff87\055\uff87\056\uff87\061\uff87\062\uff87" +
    "\063\uff87\064\uff87\070\uff87\001\002\000\054\006\031\014" +
    "\075\015\076\016\023\017\053\021\056\027\034\034\074" +
    "\041\051\042\072\043\041\045\067\046\030\051\060\053" +
    "\012\054\064\055\050\056\057\061\033\062\065\064\046" +
    "\001\002\000\056\006\031\014\075\015\076\016\023\017" +
    "\053\021\056\027\034\034\074\041\051\042\072\043\041" +
    "\045\067\046\030\051\060\053\012\054\064\055\050\056" +
    "\057\061\033\062\065\064\046\070\317\001\002\000\062" +
    "\006\uff86\014\uff86\015\uff86\016\uff86\017\uff86\021\uff86\027" +
    "\uff86\034\uff86\041\uff86\042\uff86\043\uff86\045\uff86\046\uff86" +
    "\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\070\uff86\001\002\000\026" +
    "\006\031\014\075\015\321\016\023\017\053\027\254\034" +
    "\074\041\051\042\072\064\257\001\002\000\046\004\uffd7" +
    "\005\105\006\uffd7\007\106\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\020\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7" +
    "\031\077\032\101\064\102\066\103\001\002\000\010\031" +
    "\077\032\101\065\304\001\002\000\026\006\031\014\075" +
    "\015\107\016\023\017\053\027\034\034\074\041\051\042" +
    "\072\064\046\001\002\000\004\065\325\001\002\000\010" +
    "\065\uffb8\071\uffb8\073\uffb8\001\002\000\026\006\031\014" +
    "\075\015\107\016\023\017\053\027\034\034\074\041\051" +
    "\042\072\064\046\001\002\000\004\065\330\001\002\000" +
    "\010\065\uffb5\071\uffb5\073\uffb5\001\002\000\014\035\172" +
    "\036\171\037\170\040\165\072\166\001\002\000\004\033" +
    "\333\001\002\000\004\015\334\001\002\000\004\071\335" +
    "\001\002\000\062\006\uff90\014\uff90\015\uff90\016\uff90\017" +
    "\uff90\021\uff90\027\uff90\034\uff90\041\uff90\042\uff90\043\uff90" +
    "\045\uff90\046\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\061\uff90\062\uff90\063\uff90\064\uff90\070\uff90" +
    "\001\002\000\026\006\031\014\075\015\107\016\023\017" +
    "\053\027\034\034\074\041\051\042\072\064\046\001\002" +
    "\000\004\065\340\001\002\000\014\031\uffbd\032\uffbd\065" +
    "\uffbd\071\uffbd\073\uffbd\001\002\000\004\015\342\001\002" +
    "\000\004\033\343\001\002\000\004\047\344\001\002\000" +
    "\004\033\345\001\002\000\004\050\346\001\002\000\004" +
    "\064\347\001\002\000\014\006\350\014\075\015\357\034" +
    "\074\064\360\001\002\000\006\014\075\034\074\001\002" +
    "\000\012\004\363\006\364\065\u0102\073\u0101\001\002\000" +
    "\022\004\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\065\uffc9\073\uffc9\001\002\000\022\004\uffd0\006\uffd0\010" +
    "\370\011\367\012\366\013\371\065\uffd0\073\uffd0\001\002" +
    "\000\022\004\uffc4\006\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\065\uffc4\073\uffc4\001\002\000\022\004\uffcb\006\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\013\uffcb\065\uffcb\073\uffcb\001" +
    "\002\000\022\004\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\065\uffc3\073\uffc3\001\002\000\032\004\uffc8\005" +
    "\377\006\uffc8\007\u0100\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\064\102\065\uffc8\066\103\073\uffc8\001\002\000\014\006" +
    "\350\014\075\015\357\034\074\064\360\001\002\000\010" +
    "\004\363\006\364\065\362\001\002\000\022\004\uffca\006" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\065\uffca\073\uffca" +
    "\001\002\000\014\006\350\014\075\015\357\034\074\064" +
    "\360\001\002\000\014\006\350\014\075\015\357\034\074" +
    "\064\360\001\002\000\022\004\uffd1\006\uffd1\010\370\011" +
    "\367\012\366\013\371\065\uffd1\073\uffd1\001\002\000\014" +
    "\006\350\014\075\015\357\034\074\064\360\001\002\000" +
    "\014\006\350\014\075\015\357\034\074\064\360\001\002" +
    "\000\014\006\350\014\075\015\357\034\074\064\360\001" +
    "\002\000\014\006\350\014\075\015\357\034\074\064\360" +
    "\001\002\000\022\004\uffcf\006\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\065\uffcf\073\uffcf\001\002\000\022\004\uffce" +
    "\006\uffce\010\uffce\011\uffce\012\uffce\013\uffce\065\uffce\073" +
    "\uffce\001\002\000\022\004\uffcd\006\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\065\uffcd\073\uffcd\001\002\000\022\004" +
    "\uffcc\006\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\065\uffcc" +
    "\073\uffcc\001\002\000\022\004\uffd2\006\uffd2\010\370\011" +
    "\367\012\366\013\371\065\uffd2\073\uffd2\001\002\000\022" +
    "\004\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\065" +
    "\uffc7\073\uffc7\001\002\000\022\004\uffc6\006\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\065\uffc6\073\uffc6\001\002\000" +
    "\014\006\350\014\075\015\357\034\074\064\360\001\002" +
    "\000\004\070\u0103\001\002\000\054\006\031\014\075\015" +
    "\076\016\023\017\053\021\056\027\034\034\074\041\051" +
    "\042\072\043\041\045\067\046\030\051\060\053\012\054" +
    "\064\055\050\056\057\061\033\062\065\064\046\001\002" +
    "\000\056\006\031\014\075\015\076\016\023\017\053\021" +
    "\056\027\034\034\074\041\051\042\072\043\041\045\067" +
    "\046\030\051\060\053\012\054\064\055\050\056\057\061" +
    "\033\062\065\064\046\070\u0105\001\002\000\062\006\uff83" +
    "\014\uff83\015\uff83\016\uff83\017\uff83\021\uff83\027\uff83\034" +
    "\uff83\041\uff83\042\uff83\043\uff83\045\uff83\046\uff83\051\uff83" +
    "\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\061\uff83\062" +
    "\uff83\063\uff83\064\uff83\070\uff83\001\002\000\012\004\363" +
    "\006\364\065\u0108\073\u0107\001\002\000\014\006\350\014" +
    "\075\015\357\034\074\064\360\001\002\000\004\070\u0109" +
    "\001\002\000\054\006\031\014\075\015\076\016\023\017" +
    "\053\021\056\027\034\034\074\041\051\042\072\043\041" +
    "\045\067\046\030\051\060\053\012\054\064\055\050\056" +
    "\057\061\033\062\065\064\046\001\002\000\056\006\031" +
    "\014\075\015\076\016\023\017\053\021\056\027\034\034" +
    "\074\041\051\042\072\043\041\045\067\046\030\051\060" +
    "\053\012\054\064\055\050\056\057\061\033\062\065\064" +
    "\046\070\u010b\001\002\000\062\006\uff82\014\uff82\015\uff82" +
    "\016\uff82\017\uff82\021\uff82\027\uff82\034\uff82\041\uff82\042" +
    "\uff82\043\uff82\045\uff82\046\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\055\uff82\056\uff82\061\uff82\062\uff82\063\uff82\064" +
    "\uff82\070\uff82\001\002\000\010\004\363\006\364\065\u010d" +
    "\001\002\000\004\070\u010e\001\002\000\054\006\031\014" +
    "\075\015\076\016\023\017\053\021\056\027\034\034\074" +
    "\041\051\042\072\043\041\045\067\046\030\051\060\053" +
    "\012\054\064\055\050\056\057\061\033\062\065\064\046" +
    "\001\002\000\056\006\031\014\075\015\076\016\023\017" +
    "\053\021\056\027\034\034\074\041\051\042\072\043\041" +
    "\045\067\046\030\051\060\053\012\054\064\055\050\056" +
    "\057\061\033\062\065\064\046\070\u0110\001\002\000\062" +
    "\006\uff81\014\uff81\015\uff81\016\uff81\017\uff81\021\uff81\027" +
    "\uff81\034\uff81\041\uff81\042\uff81\043\uff81\045\uff81\046\uff81" +
    "\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\061" +
    "\uff81\062\uff81\063\uff81\064\uff81\070\uff81\001\002\000\022" +
    "\004\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\065" +
    "\uffc5\073\uffc5\001\002\000\014\035\172\036\171\037\170" +
    "\040\165\072\166\001\002\000\004\033\u0114\001\002\000" +
    "\004\015\u0115\001\002\000\010\022\u0116\066\u0118\071\u0117" +
    "\001\002\000\026\006\031\014\075\015\107\016\023\017" +
    "\053\027\034\034\074\041\051\042\072\064\046\001\002" +
    "\000\070\002\uffaa\003\uffaa\006\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\021\uffaa\027\uffaa\034\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\045\uffaa\046\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\070\uffaa\001\002\000\004\014\u0119\001\002\000" +
    "\004\067\u011a\001\002\000\006\022\u011b\071\u011c\001\002" +
    "\000\026\006\031\014\075\015\107\016\023\017\053\027" +
    "\034\034\074\041\051\042\072\064\046\001\002\000\070" +
    "\002\uffa8\003\uffa8\006\uffa8\014\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\021\uffa8\027\uffa8\034\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\045\uffa8\046\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8" +
    "\070\uffa8\001\002\000\004\071\u011e\001\002\000\070\002" +
    "\uffa7\003\uffa7\006\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\021\uffa7\027\uffa7\034\uffa7\041\uffa7\042\uffa7\043\uffa7\045" +
    "\uffa7\046\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\070" +
    "\uffa7\001\002\000\004\071\u0120\001\002\000\070\002\uffa9" +
    "\003\uffa9\006\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\021" +
    "\uffa9\027\uffa9\034\uffa9\041\uffa9\042\uffa9\043\uffa9\045\uffa9" +
    "\046\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\070\uffa9" +
    "\001\002\000\012\002\ufffa\003\ufffa\053\ufffa\057\ufffa\001" +
    "\002\000\012\002\ufff9\003\ufff9\053\ufff9\057\ufff9\001\002" +
    "\000\014\035\u0128\036\u0127\037\u0126\040\u0124\072\u0125\001" +
    "\002\000\004\033\u0132\001\002\000\004\033\u0130\001\002" +
    "\000\004\033\u012e\001\002\000\004\033\u012c\001\002\000" +
    "\004\033\u0129\001\002\000\006\015\u012b\060\u012a\001\002" +
    "\000\004\070\uff9c\001\002\000\004\070\uff9b\001\002\000" +
    "\004\015\u012d\001\002\000\004\070\uff9a\001\002\000\004" +
    "\015\u012f\001\002\000\004\070\uff98\001\002\000\004\015" +
    "\u0131\001\002\000\004\070\uff99\001\002\000\004\015\u0133" +
    "\001\002\000\004\070\uff97\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\006\002\004\055\003\001\001\000\014\003" +
    "\013\004\007\007\012\032\014\052\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\016\007\012\032\014\052\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\005\042\006\046\010\036\012\043\013\067\014\035\015" +
    "\053\016\020\017\051\020\044\022\065\023\072\024\041" +
    "\026\054\027\034\030\026\032\031\033\037\035\021\040" +
    "\062\042\024\044\023\050\025\051\060\053\070\054\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\255\012\043\013\257\014\035\023\072\024\041" +
    "\035\021\040\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\005\042\006\046\010\036\012\043\013\067\014" +
    "\035\016\020\017\051\020\044\022\155\023\072\024\041" +
    "\026\054\027\034\030\026\032\031\033\037\035\021\040" +
    "\062\042\024\044\023\050\025\051\060\053\070\054\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\103\001\001" +
    "\000\002\001\001\000\032\010\036\011\122\012\043\013" +
    "\067\014\035\023\072\024\041\026\115\027\034\030\026" +
    "\035\021\040\062\001\001\000\002\001\001\000\036\010" +
    "\036\011\112\012\043\013\067\014\035\023\072\024\041" +
    "\026\115\027\034\030\026\035\021\036\113\037\114\040" +
    "\062\001\001\000\002\001\001\000\030\010\036\012\043" +
    "\013\067\014\035\023\072\024\041\026\107\027\034\030" +
    "\026\035\021\040\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\010\036\011\112\012\043\013\067\014\035" +
    "\023\072\024\041\026\115\027\034\030\026\035\021\036" +
    "\120\037\114\040\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\043\024\145\035\021\040\062\001\001\000\012\012\043" +
    "\024\144\035\021\040\062\001\001\000\012\012\043\024" +
    "\143\035\021\040\062\001\001\000\012\012\043\024\131" +
    "\035\021\040\062\001\001\000\004\012\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\134\012\043" +
    "\023\072\024\041\035\021\040\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\043\023\141\024\041" +
    "\035\021\040\062\001\001\000\014\012\043\023\140\024" +
    "\041\035\021\040\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\036\012\043\013\067" +
    "\014\035\023\072\024\041\026\147\027\034\030\026\035" +
    "\021\040\062\001\001\000\002\001\001\000\030\010\036" +
    "\012\043\013\067\014\035\023\072\024\041\026\151\027" +
    "\034\030\026\035\021\040\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\005\042\006\046\010\036\012" +
    "\043\013\067\014\035\015\154\016\020\017\051\020\044" +
    "\022\065\023\072\024\041\026\054\027\034\030\026\032" +
    "\031\033\037\035\021\040\062\042\024\044\023\050\025" +
    "\051\060\053\070\054\061\001\001\000\064\005\042\006" +
    "\046\010\036\012\043\013\067\014\035\016\020\017\051" +
    "\020\044\022\155\023\072\024\041\026\054\027\034\030" +
    "\026\032\031\033\037\035\021\040\062\042\024\044\023" +
    "\050\025\051\060\053\070\054\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\010\036\011\210" +
    "\012\043\013\067\014\035\023\072\024\041\026\115\027" +
    "\034\030\026\035\021\040\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\010\036\011\203\012\043\013\067\014\035\023\072" +
    "\024\041\026\115\027\034\030\026\035\021\040\062\041" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\010\036\011\203\012" +
    "\043\013\067\014\035\023\072\024\041\026\115\027\034" +
    "\030\026\035\021\040\062\041\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\221" +
    "\012\043\023\072\024\041\035\021\040\062\001\001\000" +
    "\002\001\001\000\066\005\042\006\046\010\036\012\043" +
    "\013\067\014\035\015\223\016\020\017\051\020\044\022" +
    "\065\023\072\024\041\026\054\027\034\030\026\032\031" +
    "\033\037\035\021\040\062\042\024\044\023\050\025\051" +
    "\060\053\070\054\061\001\001\000\066\005\042\006\046" +
    "\010\036\012\043\013\067\014\035\016\020\017\051\020" +
    "\044\022\155\023\072\024\041\026\054\027\034\030\026" +
    "\032\031\033\037\035\021\040\062\042\024\043\224\044" +
    "\023\050\025\051\060\053\070\054\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\005\042\006\046\010" +
    "\036\012\043\013\067\014\035\015\227\016\020\017\051" +
    "\020\044\022\065\023\072\024\041\026\054\027\034\030" +
    "\026\032\031\033\037\035\021\040\062\042\024\044\023" +
    "\050\025\051\060\053\070\054\061\001\001\000\064\005" +
    "\042\006\046\010\036\012\043\013\067\014\035\016\020" +
    "\017\051\020\044\022\155\023\072\024\041\026\054\027" +
    "\034\030\026\032\031\033\037\035\021\040\062\042\024" +
    "\044\023\050\025\051\060\053\070\054\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\010\036\011\251" +
    "\012\043\013\067\014\035\023\072\024\041\026\115\027" +
    "\034\030\026\035\021\040\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\275\001\001\000\004\025\265\001\001\000\022" +
    "\010\255\012\043\013\264\014\035\023\072\024\041\035" +
    "\021\040\062\001\001\000\004\031\261\001\001\000\002" +
    "\001\001\000\030\010\036\012\043\013\067\014\035\023" +
    "\072\024\041\026\262\027\034\030\026\035\021\040\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\274\012\043\023\072\024\041\035\021" +
    "\040\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\010\036\012\043\013" +
    "\067\014\035\023\072\024\041\026\276\027\034\030\026" +
    "\035\021\040\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\301\012\043\013\302\014\035\023\072" +
    "\024\041\035\021\040\062\001\001\000\004\025\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\010\036" +
    "\012\043\013\067\014\035\023\072\024\041\026\305\027" +
    "\034\030\026\035\021\040\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\005\042\006\046\010\036\012" +
    "\043\013\067\014\035\015\310\016\020\017\051\020\044" +
    "\022\065\023\072\024\041\026\054\027\034\030\026\032" +
    "\031\033\037\035\021\040\062\042\024\044\023\050\025" +
    "\051\060\053\070\054\061\001\001\000\064\005\042\006" +
    "\046\010\036\012\043\013\067\014\035\016\020\017\051" +
    "\020\044\022\155\023\072\024\041\026\054\027\034\030" +
    "\026\032\031\033\037\035\021\040\062\042\024\044\023" +
    "\050\025\051\060\053\070\054\061\001\001\000\004\021" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\005\042\006\046\010\036\012\043\013\067\014\035\015" +
    "\315\016\020\017\051\020\044\022\065\023\072\024\041" +
    "\026\054\027\034\030\026\032\031\033\037\035\021\040" +
    "\062\042\024\044\023\050\025\051\060\053\070\054\061" +
    "\001\001\000\064\005\042\006\046\010\036\012\043\013" +
    "\067\014\035\016\020\017\051\020\044\022\155\023\072" +
    "\024\041\026\054\027\034\030\026\032\031\033\037\035" +
    "\021\040\062\042\024\044\023\050\025\051\060\053\070" +
    "\054\061\001\001\000\002\001\001\000\022\010\301\012" +
    "\043\013\321\014\035\023\072\024\041\035\021\040\062" +
    "\001\001\000\004\031\325\001\001\000\004\031\322\001" +
    "\001\000\030\010\036\012\043\013\067\014\035\023\072" +
    "\024\041\026\323\027\034\030\026\035\021\040\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\010\036" +
    "\012\043\013\067\014\035\023\072\024\041\026\326\027" +
    "\034\030\026\035\021\040\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\010\036\012\043\013\067\014\035\023\072\024" +
    "\041\026\336\027\034\030\026\035\021\040\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\351\035\353\040" +
    "\355\045\350\046\352\047\354\001\001\000\004\012\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\351\035\353\040\355\045" +
    "\360\046\352\047\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\351\035\353\040\355\046\375\047" +
    "\354\001\001\000\014\012\351\035\353\040\355\046\364" +
    "\047\354\001\001\000\002\001\001\000\012\012\351\035" +
    "\353\040\355\047\374\001\001\000\012\012\351\035\353" +
    "\040\355\047\373\001\001\000\012\012\351\035\353\040" +
    "\355\047\372\001\001\000\012\012\351\035\353\040\355" +
    "\047\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\351\035\353\040" +
    "\355\045\u0105\046\352\047\354\001\001\000\002\001\001" +
    "\000\066\005\042\006\046\010\036\012\043\013\067\014" +
    "\035\015\u0103\016\020\017\051\020\044\022\065\023\072" +
    "\024\041\026\054\027\034\030\026\032\031\033\037\035" +
    "\021\040\062\042\024\044\023\050\025\051\060\053\070" +
    "\054\061\001\001\000\064\005\042\006\046\010\036\012" +
    "\043\013\067\014\035\016\020\017\051\020\044\022\155" +
    "\023\072\024\041\026\054\027\034\030\026\032\031\033" +
    "\037\035\021\040\062\042\024\044\023\050\025\051\060" +
    "\053\070\054\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\351\035\353\040\355\045\u010b\046\352" +
    "\047\354\001\001\000\002\001\001\000\066\005\042\006" +
    "\046\010\036\012\043\013\067\014\035\015\u0109\016\020" +
    "\017\051\020\044\022\065\023\072\024\041\026\054\027" +
    "\034\030\026\032\031\033\037\035\021\040\062\042\024" +
    "\044\023\050\025\051\060\053\070\054\061\001\001\000" +
    "\064\005\042\006\046\010\036\012\043\013\067\014\035" +
    "\016\020\017\051\020\044\022\155\023\072\024\041\026" +
    "\054\027\034\030\026\032\031\033\037\035\021\040\062" +
    "\042\024\044\023\050\025\051\060\053\070\054\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\005\042\006\046\010\036\012\043\013\067\014" +
    "\035\015\u010e\016\020\017\051\020\044\022\065\023\072" +
    "\024\041\026\054\027\034\030\026\032\031\033\037\035" +
    "\021\040\062\042\024\044\023\050\025\051\060\053\070" +
    "\054\061\001\001\000\064\005\042\006\046\010\036\012" +
    "\043\013\067\014\035\016\020\017\051\020\044\022\155" +
    "\023\072\024\041\026\054\027\034\030\026\032\031\033" +
    "\037\035\021\040\062\042\024\044\023\050\025\051\060" +
    "\053\070\054\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\u0112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\010\036\011\u011e\012" +
    "\043\013\067\014\035\023\072\024\041\026\115\027\034" +
    "\030\026\035\021\040\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\010\036\011\203\012\043\013\067\014\035\023\072\024" +
    "\041\026\115\027\034\030\026\035\021\040\062\041\u011c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;
    
    HashMap<String, ArrayList<String>> TablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
    String globalHash = "globalTS";

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 

    
    public void TablaSimbolosToString () throws Exception {
        String text = "";
        for (String key: TablaSimbolos.keySet()) {
            text +=  "Tabla de simbolo : " + key;
            text +=  " : valores: " ;
            for (String item : TablaSimbolos.get(key)) {
                text += item +  "\n"; 
            }
            text += "\n";
        }
        Path currentPath = Paths.get("");
        Path absolutePath = currentPath.toAbsolutePath();
        String currentDirectory = absolutePath.toString(); 
        String path4 = currentDirectory + "\\src\\py01compiladores\\tablaSimbolos.txt";
        //System.out.println(text);
        saveTablaSimbolos(text, path4);

    }
    
    public static void saveTablaSimbolos(String content, String ruta) throws IOException, Exception {
        try {
            FileWriter archivoEscritura = new FileWriter(ruta);
            BufferedWriter escritor = new BufferedWriter(archivoEscritura);
            escritor.write(content);
            escritor.close();
            System.out.println("Cadena guardada en el archivo correctamente.");
        } catch (IOException e) {
            System.err.println("Error al guardar la cadena en el archivo: " + e.getMessage());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
 TablaSimbolos.put(globalHash, new ArrayList<String>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= NT$0 BODY 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TablaSimbolosToString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BODY ::= BODY STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= FUNC_STAT_DEF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= DECL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= error ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= error UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINE ::= LINER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINE ::= LINE LINER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINER ::= ASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINER ::= DECLOC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINER ::= DECL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINER ::= FOR_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINER ::= WHILE_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINER ::= SWITCH_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LINER ::= IF_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LINER ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LINER ::= PARAMDECL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LINER ::= PRINTLN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINER ::= RETURN_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LINER ::= BREAK_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LINER ::= INPUT_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NUMBERS ::= INTEGER_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NUMBERS ::= FLOTANTE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BOOL ::= TRUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BOOL ::= FALSE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= EXP_REL_LOG ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP_ARIT ::= EXP_ARIT PLUS TERM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP_ARIT ::= EXP_ARIT MINUS TERM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP_ARIT ::= TERM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TERM ::= TERM TIMES FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERM ::= TERM DIV FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TERM ::= TERM POT FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERM ::= TERM MOD FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TERM ::= FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FACTOR ::= PARENTA EXP_ARIT PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= MINUS NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FACTOR ::= STRING_SINGLE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FACTOR ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTOR ::= IDENTIFIER MINUSM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FACTOR ::= IDENTIFIER PLUSP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FACTOR ::= INV_FUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTOR ::= INV_ARRAY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP_ARIT_INTEGER ::= EXP_ARIT_INTEGER PLUS TERM_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT_INTEGER",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP_ARIT_INTEGER ::= EXP_ARIT_INTEGER MINUS TERM_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT_INTEGER",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP_ARIT_INTEGER ::= TERM_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT_INTEGER",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TERM_INTEGER ::= TERM_INTEGER TIMES FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TERM_INTEGER ::= TERM_INTEGER DIV FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TERM_INTEGER ::= TERM_INTEGER POT FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TERM_INTEGER ::= TERM_INTEGER MOD FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TERM_INTEGER ::= FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FACTOR_INTEGER ::= PARENTA EXP_ARIT_INTEGER PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FACTOR_INTEGER ::= NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FACTOR_INTEGER ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FACTOR_INTEGER ::= IDENTIFIER PLUSP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FACTOR_INTEGER ::= IDENTIFIER MINUSM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTOR_INTEGER ::= MINUS NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTOR_INTEGER ::= INV_FUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTOR_INTEGER ::= INV_ARRAY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP_REL_LOG ::= EXP_REL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP_REL_LOG ::= EXP_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP_REL ::= EXP_ARIT OPER_REL EXP_ARIT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP_REL ::= PARENTA EXP_REL PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_REL ::= NOT PARENTA EXP_REL PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_REL ::= MINUS PARENTA EXP_REL_LOG PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP_REL ::= BOOL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP_LOG ::= OPER_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP_LOG ::= EXP_REL OPERA_LOG EXP_REL_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP_LOG ::= PARENTA EXP_REL OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP_LOG ::= NOT PARENTA EXP_REL OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP_LOG ::= IDENTIFIER OPERA_LOG EXP_REL_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP_LOG ::= PARENTA IDENTIFIER OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP_LOG ::= NOT PARENTA IDENTIFIER OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPER_LOG ::= EXP_ARIT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_LOG",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPER_REL ::= GREATERT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPER_REL ::= GREATERE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPER_REL ::= LOWERT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPER_REL ::= LOWERE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPER_REL ::= EQEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPER_REL ::= NOTEQUALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERA_LOG ::= DISJUNTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERA_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERA_LOG ::= CONJUNTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERA_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIG ::= IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER ENDLINE 
            {
              String RESULT =null;
		int tglobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tglobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tglob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TablaSimbolos.get(globalHash).add("variableGLob: " + ID.toString() + ":" + tglob.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;
		int tglobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tglobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String tglob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 TablaSimbolos.get(globalHash).add("variableGLob: " + ID.toString() + ":" + tglob.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC ENDLINE 
            {
              String RESULT =null;
		int tglobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tglobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String tglob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 TablaSimbolos.get(currentHash).add("array: " + ID.toString() + ":" + tglob.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC EQ VALUE_LIST ENDLINE 
            {
              String RESULT =null;
		int tglobleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tglobright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String tglob = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 TablaSimbolos.get(currentHash).add("array : "+ ID.toString() + ":" + tglob.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER ENDLINE 
            {
              String RESULT =null;
		int tlocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tlocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tloc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TablaSimbolos.get(currentHash).add("variableLoc: " + ID.toString() + ":" + tloc.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;
		int tlocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tlocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String tloc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 TablaSimbolos.get(currentHash).add("variableLoc: " + ID.toString() + ":" + tloc.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC ENDLINE 
            {
              String RESULT =null;
		int tlocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tlocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String tloc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 TablaSimbolos.get(currentHash).add("array: " + ID.toString() + ":" + tloc.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC EQ VALUE_LIST ENDLINE 
            {
              String RESULT =null;
		int tlocleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tlocright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String tloc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 TablaSimbolos.get(currentHash).add("array : "+ ID.toString() + ":" + tloc.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TYPES ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TYPES ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TYPES ::= STRINGC 
            {
              String RESULT =null;
		 RESULT = "String"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TYPES ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TYPES ::= BOOOLEANF 
            {
              String RESULT =null;
		 RESULT = "bool"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALUE ::= EXP_REL_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCTION_STATEMENT ::= FUNC SEP INT SEP MAIN 
            {
              String RESULT =null;
		
                                                         String tipo;
                                                         tipo = "tipo:Main:int";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = "main";
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCTION_STATEMENT ::= FUNC SEP INT SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String tipo;
                                                         tipo = "tipo:func:int";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCTION_STATEMENT ::= FUNC SEP FLOAT SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String tipo;
                                                         tipo = "tipo:func:float";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCTION_STATEMENT ::= FUNC SEP BOOOLEANF SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String tipo;
                                                         tipo = "tipo:func:bool";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCTION_STATEMENT ::= FUNC SEP CHAR SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String tipo;
                                                         tipo = "tipo:func:char";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCTION_STATEMENT ::= FUNC SEP STRINGC SEP IDENTIFIER 
            {
              String RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String tipo;
                                                         tipo = "tipo:func:String";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = ID.toString();
                                                         fun.add(tipo);
                                                         TablaSimbolos.put(currentHash, fun);
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNC_STAT_DEF ::= FUNCTION_STATEMENT UNDERS LINE UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_STAT_DEF",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INV_FUNC ::= IDENTIFIER PARENTA PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_FUNC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INV_FUNC ::= IDENTIFIER PARENTA PARAMS PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_FUNC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMS ::= PARAMETER COMA PARAMS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMS ::= PARAMETER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMETER ::= VALUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMDECL ::= PARAM SEP TYPES SEP IDENTIFIER ENDLINE 
            {
              String RESULT =null;
		int tparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tparam = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TablaSimbolos.get(currentHash).add("parametro : "+ ID.toString() + ":" + tparam.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMDECL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INV_ARRAY ::= IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_ARRAY",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALUE_LIST ::= VALUE COMA VALUE_LIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_LIST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALUE_LIST ::= VALUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_LIST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PRINTLN ::= PRINTF PARENTA PARENTC ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PRINTLN ::= PRINTF PARENTA STRING_LITERAL PARENTC ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PRINTLN ::= PRINTF PARENTA STRING_SINGLE PARENTC ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PRINTLN ::= PRINTF PARENTA IDENTIFIER PARENTC ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INPUT_STATEMENT ::= READ PARENTA IDENTIFIER PARENTC ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPUT_STATEMENT",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IF_STATEMENT ::= IF PARENTA EXP_REL_LOG PARENTC UNDERS LINE UNDERS ELSE_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ELSE_STATEMENT ::= ELSE UNDERS LINE UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ELSE_STATEMENT ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // WHILE_STATEMENT ::= WHILE PARENTA EXP_REL_LOG PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STATEMENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FOR_STATEMENT ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT_INTEGER PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FOR_STATEMENT ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT_INTEGER COMA EXP_ARIT_INTEGER PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FOR_STATEMENT ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT_INTEGER COMA EXP_ARIT_INTEGER COMA EXP_ARIT_INTEGER PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SWITCH_STATEMENT ::= SWITCH PARENTA IDENTIFIER PARENTC UNDERS CASE_LIST UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_STATEMENT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CASE_LIST ::= CASE EXP_ARIT SEP LINE CASE_LIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASE_LIST ::= CASE EXP_ARIT SEP LINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASE_LIST ::= DEFAULT SEP LINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CASE_LIST ::= DEFAULT SEP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // RETURN_STATEMENT ::= RETURN ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STATEMENT",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // RETURN_STATEMENT ::= RETURN SEP VALUE ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STATEMENT",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // BREAK_STATEMENT ::= BREAK ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_STATEMENT",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
