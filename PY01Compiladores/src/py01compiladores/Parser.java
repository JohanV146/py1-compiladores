
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package py01compiladores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\004\003\000\002\005" +
    "\004\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\004\000\002\017\003\000" +
    "\002\017\004\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\014\003\000\002\014\003\000\002\016" +
    "\003\000\002\016\003\000\002\007\004\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\010\006\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\011\012\000\002\011\012\000" +
    "\002\020\011\000\002\020\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\016\003\016\020\022\022\020\043\011\055" +
    "\014\071\005\001\002\000\004\002\113\001\002\000\004" +
    "\042\100\001\002\000\020\002\ufffc\003\ufffc\020\ufffc\022" +
    "\ufffc\043\ufffc\055\ufffc\071\ufffc\001\002\000\022\002\ufff6" +
    "\003\ufff6\020\ufff6\022\ufff6\043\ufff6\055\ufff6\071\ufff6\102" +
    "\ufff6\001\002\000\030\005\uffeb\007\uffeb\011\uffeb\014\uffeb" +
    "\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\077\uffeb\103" +
    "\uffeb\001\002\000\030\005\ufff3\007\ufff3\011\ufff3\014\ufff3" +
    "\030\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\077\ufff3\103" +
    "\ufff3\001\002\000\014\005\040\007\035\011\043\014\044" +
    "\103\077\001\002\000\020\002\000\003\016\020\022\022" +
    "\020\043\011\055\014\071\005\001\002\000\004\076\061" +
    "\001\002\000\022\002\ufff7\003\ufff7\020\ufff7\022\ufff7\043" +
    "\ufff7\055\ufff7\071\ufff7\102\ufff7\001\002\000\006\102\060" +
    "\103\057\001\002\000\020\002\ufffd\003\ufffd\020\ufffd\022" +
    "\ufffd\043\ufffd\055\ufffd\071\ufffd\001\002\000\004\030\024" +
    "\001\002\000\022\002\ufff5\003\ufff5\020\ufff5\022\ufff5\043" +
    "\ufff5\055\ufff5\071\ufff5\102\ufff5\001\002\000\030\005\ufff4" +
    "\007\ufff4\011\ufff4\014\ufff4\030\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\077\ufff4\103\ufff4\001\002\000\020\002\ufffe" +
    "\003\ufffe\020\ufffe\022\ufffe\043\ufffe\055\ufffe\071\ufffe\001" +
    "\002\000\014\020\022\023\031\043\011\053\027\054\033" +
    "\001\002\000\004\103\uffe2\001\002\000\006\077\uffe5\103" +
    "\uffe5\001\002\000\006\077\ufff2\103\ufff2\001\002\000\026" +
    "\005\040\007\035\011\043\014\044\030\041\032\036\033" +
    "\042\034\045\035\037\103\uffe1\001\002\000\004\103\uffe3" +
    "\001\002\000\004\103\034\001\002\000\006\077\ufff1\103" +
    "\ufff1\001\002\000\022\002\uffe4\003\uffe4\020\uffe4\022\uffe4" +
    "\043\uffe4\055\uffe4\071\uffe4\102\uffe4\001\002\000\006\020" +
    "\022\043\011\001\002\000\006\020\022\043\011\001\002" +
    "\000\006\020\022\043\011\001\002\000\006\020\022\043" +
    "\011\001\002\000\006\020\022\043\011\001\002\000\006" +
    "\020\022\043\011\001\002\000\006\020\022\043\011\001" +
    "\002\000\006\020\022\043\011\001\002\000\006\020\022" +
    "\043\011\001\002\000\016\005\040\007\035\011\043\014" +
    "\044\077\uffe8\103\uffe8\001\002\000\030\005\uffed\007\uffed" +
    "\011\043\014\uffed\030\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\077\uffed\103\uffed\001\002\000\030\005\uffec\007\uffec" +
    "\011\uffec\014\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\077\uffec\103\uffec\001\002\000\016\005\040\007\035" +
    "\011\043\014\044\077\uffe9\103\uffe9\001\002\000\016\005" +
    "\040\007\035\011\043\014\044\077\uffe6\103\uffe6\001\002" +
    "\000\030\005\uffef\007\uffef\011\043\014\044\030\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\077\uffef\103\uffef\001\002" +
    "\000\016\005\040\007\035\011\043\014\044\077\uffe7\103" +
    "\uffe7\001\002\000\016\005\040\007\035\011\043\014\044" +
    "\077\uffea\103\uffea\001\002\000\030\005\uffee\007\uffee\011" +
    "\043\014\044\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\077\uffee\103\uffee\001\002\000\020\002\ufffb\003\ufffb\020" +
    "\ufffb\022\ufffb\043\ufffb\055\ufffb\071\ufffb\001\002\000\020" +
    "\002\ufffa\003\ufffa\020\ufffa\022\ufffa\043\ufffa\055\ufffa\071" +
    "\ufffa\001\002\000\012\020\022\043\011\053\027\054\033" +
    "\001\002\000\004\077\072\001\002\000\026\005\040\007" +
    "\035\011\043\014\044\030\041\032\036\033\042\034\045" +
    "\035\037\077\064\001\002\000\004\102\065\001\002\000" +
    "\012\020\022\022\020\043\011\055\014\001\002\000\014" +
    "\020\ufff9\022\ufff9\043\ufff9\055\ufff9\102\ufff9\001\002\000" +
    "\014\020\022\022\020\043\011\055\014\102\070\001\002" +
    "\000\022\002\uffdd\003\uffdd\020\uffdd\022\uffdd\043\uffdd\055" +
    "\uffdd\071\uffdd\102\uffdd\001\002\000\014\020\ufff8\022\ufff8" +
    "\043\ufff8\055\ufff8\102\ufff8\001\002\000\004\102\073\001" +
    "\002\000\012\020\022\022\020\043\011\055\014\001\002" +
    "\000\014\020\022\022\020\043\011\055\014\102\075\001" +
    "\002\000\022\002\uffde\003\uffde\020\uffde\022\uffde\043\uffde" +
    "\055\uffde\071\uffde\102\uffde\001\002\000\020\002\uffff\003" +
    "\uffff\020\uffff\022\uffff\043\uffff\055\uffff\071\uffff\001\002" +
    "\000\022\002\ufff0\003\ufff0\020\ufff0\022\ufff0\043\ufff0\055" +
    "\ufff0\071\ufff0\102\ufff0\001\002\000\004\045\101\001\002" +
    "\000\004\042\102\001\002\000\006\022\104\072\103\001" +
    "\002\000\004\102\110\001\002\000\004\102\105\001\002" +
    "\000\012\020\022\022\020\043\011\055\014\001\002\000" +
    "\014\020\022\022\020\043\011\055\014\102\107\001\002" +
    "\000\020\002\uffdf\003\uffdf\020\uffdf\022\uffdf\043\uffdf\055" +
    "\uffdf\071\uffdf\001\002\000\012\020\022\022\020\043\011" +
    "\055\014\001\002\000\014\020\022\022\020\043\011\055" +
    "\014\102\112\001\002\000\020\002\uffe0\003\uffe0\020\uffe0" +
    "\022\uffe0\043\uffe0\055\uffe0\071\uffe0\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\026\004\003\005\012\006\022\007\020\010" +
    "\014\011\005\012\011\014\007\020\006\021\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\075\007\020\010\014\011\005\012" +
    "\011\014\007\020\006\021\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\027\013\031\014\007\015\024\016" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\055" +
    "\014\007\001\001\000\006\012\054\014\007\001\001\000" +
    "\006\012\053\014\007\001\001\000\006\012\052\014\007" +
    "\001\001\000\006\012\051\014\007\001\001\000\006\012" +
    "\050\014\007\001\001\000\006\012\047\014\007\001\001" +
    "\000\006\012\046\014\007\001\001\000\006\012\045\014" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\062\014" +
    "\007\015\061\016\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\020\010\014\012" +
    "\011\014\007\017\066\020\006\021\065\001\001\000\002" +
    "\001\001\000\016\007\020\010\014\012\011\014\007\020" +
    "\006\021\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\020\010\014\012\011\014" +
    "\007\017\073\020\006\021\065\001\001\000\016\007\020" +
    "\010\014\012\011\014\007\020\006\021\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\020\010\014\012\011" +
    "\014\007\017\105\020\006\021\065\001\001\000\016\007" +
    "\020\010\014\012\011\014\007\020\006\021\070\001\001" +
    "\000\002\001\001\000\020\007\020\010\014\012\011\014" +
    "\007\017\110\020\006\021\065\001\001\000\016\007\020" +
    "\010\014\012\011\014\007\020\006\021\070\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= BODY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BODY ::= BODY STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BODY ::= STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= LINER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= FUNCTION_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= error ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= error UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LINE ::= LINER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINE ::= LINE LINER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINER ::= ASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINER ::= IF_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINER ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NUMBERS ::= INTEGER_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NUMBERS ::= FLOTANTE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BOOL ::= TRUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BOOL ::= FALSE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= EXP_ARIT ENDLINE 
            {
              String RESULT =null;
		System.out.println("here");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP_ARIT ::= EXP_ARIT PLUS EXP_ARIT 
            {
              String RESULT =null;
		 System.out.println("+");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP_ARIT ::= EXP_ARIT MINUS EXP_ARIT 
            {
              String RESULT =null;
		 System.out.println("-");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP_ARIT ::= EXP_ARIT TIMES EXP_ARIT 
            {
              String RESULT =null;
		 System.out.println("*");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP_ARIT ::= EXP_ARIT DIV EXP_ARIT 
            {
              String RESULT =null;
		 System.out.println("/");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP_ARIT ::= NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP_COMP ::= EXP_ARIT GREATERT EXP_ARIT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_COMP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP_COMP ::= EXP_ARIT LOWERT EXP_ARIT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_COMP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP_COMP ::= EXP_ARIT GREATERE EXP_ARIT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_COMP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP_COMP ::= EXP_ARIT LOWERE EXP_ARIT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_COMP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP_COMP ::= EXP_ARIT EQ EXP_ARIT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_COMP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP_COMP ::= BOOL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_COMP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIG ::= IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;
		 System.out.println("Asignacion int "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALUE ::= STRING_LITERAL 
            {
              String RESULT =null;
		 System.out.println("Asignacion String "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALUE ::= EXP_COMP 
            {
              String RESULT =null;
		 System.out.println("Asignacion expresion de comp "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALUE ::= EXP_ARIT 
            {
              String RESULT =null;
		 System.out.println("Asignacion exp "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_STATEMENT ::= FUNC SEP INT SEP MAIN UNDERS LINE UNDERS 
            {
              String RESULT =null;
		 System.out.println("Main"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCTION_STATEMENT ::= FUNC SEP INT SEP IDENTIFIER UNDERS LINE UNDERS 
            {
              String RESULT =null;
		 System.out.println("declaracion de funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF_STATEMENT ::= IF PARENTA EXP_COMP PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;
		 System.out.println("if statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_STATEMENT ::= IF PARENTA EXP_ARIT PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;
		 System.out.println("if statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
