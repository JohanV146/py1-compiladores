
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package py01compiladores;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\056\002\000\002\004" +
    "\004\000\002\005\004\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004\000" +
    "\002\017\003\000\002\017\004\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\014\003\000\002\014\003\000\002" +
    "\016\003\000\002\016\003\000\002\007\004\000\002\012" +
    "\005\000\002\012\005\000\002\012\003\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\004\000\002\026\004\000\002\026\003\000\002\026\003" +
    "\000\002\050\005\000\002\050\005\000\002\050\003\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\003\000\002\052\005\000\002\052" +
    "\003\000\002\052\003\000\002\052\004\000\002\052\004" +
    "\000\002\052\004\000\002\052\003\000\002\052\003\000" +
    "\002\030\003\000\002\030\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\006\000\002\015\003\000\002\031" +
    "\003\000\002\031\005\000\002\031\007\000\002\031\010" +
    "\000\002\031\005\000\002\031\007\000\002\031\010\000" +
    "\002\032\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\033\003\000\002\033\003\000\002\010\006" +
    "\000\002\034\010\000\002\034\012\000\002\035\010\000" +
    "\002\035\012\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\013" +
    "\003\000\002\011\011\000\002\011\011\000\002\011\011" +
    "\000\002\011\011\000\002\011\011\000\002\011\010\000" +
    "\002\055\004\000\002\037\005\000\002\037\006\000\002" +
    "\040\005\000\002\040\003\000\002\041\003\000\002\047" +
    "\010\000\002\042\006\000\002\043\013\000\002\043\013" +
    "\000\002\044\005\000\002\044\003\000\002\053\006\000" +
    "\002\053\007\000\002\053\007\000\002\022\012\000\002" +
    "\023\006\000\002\023\002\000\002\021\011\000\002\020" +
    "\017\000\002\020\021\000\002\020\023\000\002\045\011" +
    "\000\002\046\007\000\002\046\005\000\002\054\004\000" +
    "\002\054\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\010\003\000\065\000\071\000\001\002\000" +
    "\010\003\012\065\011\071\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\042\172\001" +
    "\002\000\012\002\ufffd\003\ufffd\065\ufffd\071\ufffd\001\002" +
    "\000\004\042\023\001\002\000\006\102\022\103\021\001" +
    "\002\000\004\102\020\001\002\000\012\002\uffff\003\012" +
    "\065\011\071\007\001\002\000\012\002\ufffb\003\ufffb\065" +
    "\ufffb\071\ufffb\001\002\000\012\002\ufffc\003\ufffc\065\ufffc" +
    "\071\ufffc\001\002\000\012\002\ufffe\003\ufffe\065\ufffe\071" +
    "\ufffe\001\002\000\012\002\uff9d\003\uff9d\065\uff9d\071\uff9d" +
    "\001\002\000\012\002\ufffa\003\ufffa\065\ufffa\071\ufffa\001" +
    "\002\000\012\002\ufff9\003\ufff9\065\ufff9\071\ufff9\001\002" +
    "\000\014\045\031\046\030\047\027\051\025\104\024\001" +
    "\002\000\004\042\uffa5\001\002\000\004\042\uffa7\001\002" +
    "\000\004\042\032\001\002\000\004\042\uffa9\001\002\000" +
    "\004\042\uffa8\001\002\000\004\042\uffa6\001\002\000\004" +
    "\022\033\001\002\000\006\030\034\103\035\001\002\000" +
    "\024\007\053\020\055\022\043\023\046\036\042\043\045" +
    "\053\044\054\052\076\057\001\002\000\066\002\uffad\003" +
    "\uffad\007\uffad\020\uffad\022\uffad\023\uffad\036\uffad\043\uffad" +
    "\045\uffad\047\uffad\053\uffad\054\uffad\055\uffad\057\uffad\060" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad" +
    "\071\uffad\073\uffad\075\uffad\076\uffad\102\uffad\001\002\000" +
    "\046\005\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\024\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\077\uffd5\103\uffd5\105\uffd5\001\002" +
    "\000\046\005\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\024\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\077\uffd6\103\uffd6\105\uffd6\001" +
    "\002\000\010\077\uffc3\103\uffc3\105\uffc3\001\002\000\004" +
    "\103\171\001\002\000\004\076\160\001\002\000\054\005" +
    "\uffd9\006\106\007\uffd9\010\107\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\024\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037" +
    "\uffd9\040\063\041\064\076\104\077\uffd9\100\105\103\uffd9" +
    "\105\uffd9\001\002\000\014\040\uffe8\041\uffe8\077\uffe8\103" +
    "\uffe8\105\uffe8\001\002\000\046\005\uffe9\007\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\024\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\077\uffe9" +
    "\103\uffe9\105\uffe9\001\002\000\046\005\uffda\007\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\024\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\037\uffda\040\uffda\041\uffda\042\uffda\077" +
    "\uffda\103\uffda\105\uffda\001\002\000\010\077\uffa4\103\uffa4" +
    "\105\uffa4\001\002\000\046\005\uffde\007\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\024\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\037\uffde\040\uffde\041\uffde\042\uffde\077\uffde\103" +
    "\uffde\105\uffde\001\002\000\030\005\100\007\101\024\137" +
    "\032\140\033\143\034\144\035\142\037\141\077\uffb7\103" +
    "\uffb7\105\uffb7\001\002\000\014\040\uffe7\041\uffe7\077\uffe7" +
    "\103\uffe7\105\uffe7\001\002\000\006\020\055\043\045\001" +
    "\002\000\010\077\uffbe\103\uffbe\105\uffbe\001\002\000\046" +
    "\005\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\024" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\077\uffea\103\uffea\105\uffea\001\002\000" +
    "\014\040\uffbf\041\uffbf\077\uffbf\103\uffbf\105\uffbf\001\002" +
    "\000\024\007\053\020\055\022\126\023\046\036\127\043" +
    "\045\053\044\054\052\076\130\001\002\000\046\005\uffdb" +
    "\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\024\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\077\uffdb\103\uffdb\105\uffdb\001\002\000\046\005" +
    "\uffe3\007\uffe3\011\071\012\070\013\067\014\072\024\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\077\uffe3\103\uffe3\105\uffe3\001\002\000\014" +
    "\040\063\041\064\077\uffc4\103\uffc4\105\uffc4\001\002\000" +
    "\024\007\uffaf\020\uffaf\022\uffaf\023\uffaf\036\uffaf\043\uffaf" +
    "\053\uffaf\054\uffaf\076\uffaf\001\002\000\024\007\uffb0\020" +
    "\uffb0\022\uffb0\023\uffb0\036\uffb0\043\uffb0\053\uffb0\054\uffb0" +
    "\076\uffb0\001\002\000\024\007\053\020\055\022\043\023" +
    "\046\036\042\043\045\053\044\054\052\076\057\001\002" +
    "\000\010\077\uffbd\103\uffbd\105\uffbd\001\002\000\016\007" +
    "\053\020\055\022\074\023\046\043\045\076\075\001\002" +
    "\000\016\007\053\020\055\022\074\023\046\043\045\076" +
    "\075\001\002\000\016\007\053\020\055\022\074\023\046" +
    "\043\045\076\075\001\002\000\016\007\053\020\055\022" +
    "\074\023\046\043\045\076\075\001\002\000\046\005\uffe2" +
    "\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\024\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\077\uffe2\103\uffe2\105\uffe2\001\002\000\056\005" +
    "\uffd9\006\106\007\uffd9\010\107\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\024\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\076\104\077\uffd9\100\105" +
    "\103\uffd9\105\uffd9\001\002\000\016\007\053\020\055\022" +
    "\074\023\046\043\045\076\075\001\002\000\010\005\100" +
    "\007\101\077\077\001\002\000\046\005\uffdd\007\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\024\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\077" +
    "\uffdd\103\uffdd\105\uffdd\001\002\000\016\007\053\020\055" +
    "\022\074\023\046\043\045\076\075\001\002\000\016\007" +
    "\053\020\055\022\074\023\046\043\045\076\075\001\002" +
    "\000\046\005\uffe4\007\uffe4\011\071\012\070\013\067\014" +
    "\072\024\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\077\uffe4\103\uffe4\105\uffe4\001" +
    "\002\000\046\005\uffe5\007\uffe5\011\071\012\070\013\067" +
    "\014\072\024\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\077\uffe5\103\uffe5\105\uffe5" +
    "\001\002\000\026\007\053\020\055\022\043\023\046\036" +
    "\042\043\045\053\044\054\052\076\057\077\115\001\002" +
    "\000\004\020\110\001\002\000\046\005\uffd7\007\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\024\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\077" +
    "\uffd7\103\uffd7\105\uffd7\001\002\000\046\005\uffd8\007\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\024\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\077\uffd8\103\uffd8\105\uffd8\001\002\000\004\101\111\001" +
    "\002\000\046\005\uff96\007\uff96\011\uff96\012\uff96\013\uff96" +
    "\014\uff96\024\uff96\032\uff96\033\uff96\034\uff96\035\uff96\037" +
    "\uff96\040\uff96\041\uff96\042\uff96\077\uff96\103\uff96\105\uff96" +
    "\001\002\000\006\077\uff98\105\uff98\001\002\000\004\077" +
    "\120\001\002\000\006\077\uff99\105\116\001\002\000\046" +
    "\005\uff9c\007\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\024" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\077\uff9c\103\uff9c\105\uff9c\001\002\000" +
    "\024\007\053\020\055\022\043\023\046\036\042\043\045" +
    "\053\044\054\052\076\057\001\002\000\004\077\uff9a\001" +
    "\002\000\046\005\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\024\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\077\uff9b\103\uff9b\105\uff9b" +
    "\001\002\000\046\005\uffe1\007\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\024\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\077\uffe1\103\uffe1\105" +
    "\uffe1\001\002\000\046\005\uffe0\007\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\024\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\077\uffe0\103\uffe0" +
    "\105\uffe0\001\002\000\046\005\uffdf\007\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\024\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\077\uffdf\103" +
    "\uffdf\105\uffdf\001\002\000\010\040\063\041\064\077\132" +
    "\001\002\000\024\005\100\007\101\024\137\032\140\033" +
    "\143\034\144\035\142\037\141\077\077\001\002\000\050" +
    "\005\uffd9\006\106\007\uffd9\010\107\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\024\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\037\uffd9\040\063\041\064\076\104\077\uffd9\100\105\001" +
    "\002\000\004\076\133\001\002\000\024\007\053\020\055" +
    "\022\074\023\046\036\127\043\045\053\044\054\052\076" +
    "\130\001\002\000\004\077\132\001\002\000\014\040\uffc1" +
    "\041\uffc1\077\uffc1\103\uffc1\105\uffc1\001\002\000\024\007" +
    "\053\020\055\022\074\023\046\036\127\043\045\053\044" +
    "\054\052\076\130\001\002\000\004\077\146\001\002\000" +
    "\022\005\100\007\101\024\137\032\140\033\143\034\144" +
    "\035\142\037\141\001\002\000\016\007\053\020\055\022" +
    "\074\023\046\043\045\076\075\001\002\000\016\007\uffb2" +
    "\020\uffb2\022\uffb2\023\uffb2\043\uffb2\076\uffb2\001\002\000" +
    "\016\007\uffb6\020\uffb6\022\uffb6\023\uffb6\043\uffb6\076\uffb6" +
    "\001\002\000\016\007\uffb1\020\uffb1\022\uffb1\023\uffb1\043" +
    "\uffb1\076\uffb1\001\002\000\016\007\uffb3\020\uffb3\022\uffb3" +
    "\023\uffb3\043\uffb3\076\uffb3\001\002\000\016\007\uffb4\020" +
    "\uffb4\022\uffb4\023\uffb4\043\uffb4\076\uffb4\001\002\000\016" +
    "\007\uffb5\020\uffb5\022\uffb5\023\uffb5\043\uffb5\076\uffb5\001" +
    "\002\000\020\005\100\007\101\040\uffc2\041\uffc2\077\uffc2" +
    "\103\uffc2\105\uffc2\001\002\000\014\040\uffc0\041\uffc0\077" +
    "\uffc0\103\uffc0\105\uffc0\001\002\000\024\007\053\020\055" +
    "\022\043\023\046\036\042\043\045\053\044\054\052\076" +
    "\057\001\002\000\004\077\151\001\002\000\010\077\uffb9" +
    "\103\uffb9\105\uffb9\001\002\000\024\007\053\020\055\022" +
    "\043\023\046\036\042\043\045\053\044\054\052\076\057" +
    "\001\002\000\004\077\154\001\002\000\010\077\uffbc\103" +
    "\uffbc\105\uffbc\001\002\000\046\005\uffdc\007\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\024\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\077\uffdc" +
    "\103\uffdc\105\uffdc\001\002\000\024\007\053\020\055\022" +
    "\043\023\046\036\042\043\045\053\044\054\052\076\057" +
    "\001\002\000\010\077\uffba\103\uffba\105\uffba\001\002\000" +
    "\024\007\053\020\055\022\162\023\046\036\127\043\045" +
    "\053\044\054\052\076\130\001\002\000\010\040\063\041" +
    "\064\077\146\001\002\000\046\005\uffd9\006\106\007\uffd9" +
    "\010\107\011\uffd9\012\uffd9\013\uffd9\014\uffd9\024\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9\040\063\041\064" +
    "\076\104\100\105\001\002\000\024\007\053\020\055\022" +
    "\043\023\046\036\042\043\045\053\044\054\052\076\057" +
    "\001\002\000\004\077\165\001\002\000\010\077\uffb8\103" +
    "\uffb8\105\uffb8\001\002\000\024\007\053\020\055\022\043" +
    "\023\046\036\042\043\045\053\044\054\052\076\057\001" +
    "\002\000\004\077\170\001\002\000\010\077\uffbb\103\uffbb" +
    "\105\uffbb\001\002\000\066\002\uffac\003\uffac\007\uffac\020" +
    "\uffac\022\uffac\023\uffac\036\uffac\043\uffac\045\uffac\047\uffac" +
    "\053\uffac\054\uffac\055\uffac\057\uffac\060\uffac\063\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\073\uffac" +
    "\075\uffac\076\uffac\102\uffac\001\002\000\014\045\177\046" +
    "\175\047\176\051\173\104\174\001\002\000\004\042\u012e" +
    "\001\002\000\004\042\u012a\001\002\000\004\042\u0126\001" +
    "\002\000\004\042\u0122\001\002\000\004\042\200\001\002" +
    "\000\006\022\202\072\201\001\002\000\004\102\u0120\001" +
    "\002\000\004\102\203\001\002\000\052\007\053\020\055" +
    "\022\235\023\046\036\042\043\045\045\207\047\205\053" +
    "\044\054\052\055\217\057\234\060\213\063\231\065\011" +
    "\066\232\067\223\070\227\073\215\076\057\001\002\000" +
    "\060\007\ufff3\020\ufff3\022\ufff3\023\ufff3\036\ufff3\043\ufff3" +
    "\045\ufff3\047\ufff3\053\ufff3\054\ufff3\055\ufff3\057\ufff3\060" +
    "\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3" +
    "\073\ufff3\075\ufff3\076\ufff3\102\ufff3\001\002\000\004\042" +
    "\u0118\001\002\000\060\007\uffed\020\uffed\022\uffed\023\uffed" +
    "\036\uffed\043\uffed\045\uffed\047\uffed\053\uffed\054\uffed\055" +
    "\uffed\057\uffed\060\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\073\uffed\075\uffed\076\uffed\102\uffed\001" +
    "\002\000\004\042\u010d\001\002\000\060\007\ufff1\020\ufff1" +
    "\022\ufff1\023\ufff1\036\ufff1\043\ufff1\045\ufff1\047\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\057\ufff1\060\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\067\ufff1\070\ufff1\073\ufff1\075\ufff1\076" +
    "\ufff1\102\ufff1\001\002\000\060\007\uffec\020\uffec\022\uffec" +
    "\023\uffec\036\uffec\043\uffec\045\uffec\047\uffec\053\uffec\054" +
    "\uffec\055\uffec\057\uffec\060\uffec\063\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\070\uffec\073\uffec\075\uffec\076\uffec\102" +
    "\uffec\001\002\000\060\007\uffef\020\uffef\022\uffef\023\uffef" +
    "\036\uffef\043\uffef\045\uffef\047\uffef\053\uffef\054\uffef\055" +
    "\uffef\057\uffef\060\uffef\063\uffef\064\uffef\065\uffef\066\uffef" +
    "\067\uffef\070\uffef\073\uffef\075\uffef\076\uffef\102\uffef\001" +
    "\002\000\004\042\334\001\002\000\060\007\ufff4\020\ufff4" +
    "\022\ufff4\023\ufff4\036\ufff4\043\ufff4\045\ufff4\047\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\057\ufff4\060\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\073\ufff4\075\ufff4\076" +
    "\ufff4\102\ufff4\001\002\000\004\042\327\001\002\000\060" +
    "\007\ufff5\020\ufff5\022\ufff5\023\ufff5\036\ufff5\043\ufff5\045" +
    "\ufff5\047\ufff5\053\ufff5\054\ufff5\055\ufff5\057\ufff5\060\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\073" +
    "\ufff5\075\ufff5\076\ufff5\102\ufff5\001\002\000\004\076\314" +
    "\001\002\000\060\007\uffee\020\uffee\022\uffee\023\uffee\036" +
    "\uffee\043\uffee\045\uffee\047\uffee\053\uffee\054\uffee\055\uffee" +
    "\057\uffee\060\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\070\uffee\073\uffee\075\uffee\076\uffee\102\uffee\001\002" +
    "\000\060\007\ufff0\020\ufff0\022\ufff0\023\ufff0\036\ufff0\043" +
    "\ufff0\045\ufff0\047\ufff0\053\ufff0\054\ufff0\055\ufff0\057\ufff0" +
    "\060\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\073\ufff0\075\ufff0\076\ufff0\102\ufff0\001\002\000\060" +
    "\007\ufff6\020\ufff6\022\ufff6\023\ufff6\036\ufff6\043\ufff6\045" +
    "\ufff6\047\ufff6\053\ufff6\054\ufff6\055\ufff6\057\ufff6\060\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\073" +
    "\ufff6\075\ufff6\076\ufff6\102\ufff6\001\002\000\006\042\310" +
    "\103\311\001\002\000\060\007\ufff2\020\ufff2\022\ufff2\023" +
    "\ufff2\036\ufff2\043\ufff2\045\ufff2\047\ufff2\053\ufff2\054\ufff2" +
    "\055\ufff2\057\ufff2\060\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\073\ufff2\075\ufff2\076\ufff2\102\ufff2" +
    "\001\002\000\054\007\053\020\055\022\235\023\046\036" +
    "\042\043\045\045\207\047\205\053\044\054\052\055\217" +
    "\057\234\060\213\063\231\065\011\066\232\067\223\070" +
    "\227\073\215\076\057\102\uffa2\001\002\000\004\103\307" +
    "\001\002\000\004\076\276\001\002\000\060\007\uffeb\020" +
    "\uffeb\022\uffeb\023\uffeb\036\uffeb\043\uffeb\045\uffeb\047\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\057\uffeb\060\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\073\uffeb\075\uffeb" +
    "\076\uffeb\102\uffeb\001\002\000\004\076\260\001\002\000" +
    "\004\042\250\001\002\000\060\007\ufff8\020\ufff8\022\ufff8" +
    "\023\ufff8\036\ufff8\043\ufff8\045\ufff8\047\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\057\ufff8\060\ufff8\063\ufff8\064\ufff8\065\ufff8" +
    "\066\ufff8\067\ufff8\070\ufff8\073\ufff8\075\ufff8\076\ufff8\102" +
    "\ufff8\001\002\000\004\076\241\001\002\000\052\005\uffd9" +
    "\006\106\007\uffd9\010\107\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\024\uffd9\030\236\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\037\uffd9\040\063\041\064\076\104\100\105\103\uffd9\001" +
    "\002\000\024\007\053\020\055\022\043\023\046\036\042" +
    "\043\045\053\044\054\052\076\057\001\002\000\004\103" +
    "\240\001\002\000\060\007\uffae\020\uffae\022\uffae\023\uffae" +
    "\036\uffae\043\uffae\045\uffae\047\uffae\053\uffae\054\uffae\055" +
    "\uffae\057\uffae\060\uffae\063\uffae\064\uffae\065\uffae\066\uffae" +
    "\067\uffae\070\uffae\073\uffae\075\uffae\076\uffae\102\uffae\001" +
    "\002\000\024\007\053\020\055\022\043\023\046\036\042" +
    "\043\045\053\044\054\052\076\057\001\002\000\004\077" +
    "\243\001\002\000\004\102\244\001\002\000\052\007\053" +
    "\020\055\022\235\023\046\036\042\043\045\045\207\047" +
    "\205\053\044\054\052\055\217\057\234\060\213\063\231" +
    "\065\011\066\232\067\223\070\227\073\215\076\057\001" +
    "\002\000\054\007\053\020\055\022\235\023\046\036\042" +
    "\043\045\045\207\047\205\053\044\054\052\055\217\057" +
    "\234\060\213\063\231\065\011\066\232\067\223\070\227" +
    "\073\215\076\057\102\247\001\002\000\060\007\ufff7\020" +
    "\ufff7\022\ufff7\023\ufff7\036\ufff7\043\ufff7\045\ufff7\047\ufff7" +
    "\053\ufff7\054\ufff7\055\ufff7\057\ufff7\060\ufff7\063\ufff7\064" +
    "\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\073\ufff7\075\ufff7" +
    "\076\ufff7\102\ufff7\001\002\000\060\007\uff8b\020\uff8b\022" +
    "\uff8b\023\uff8b\036\uff8b\043\uff8b\045\uff8b\047\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\057\uff8b\060\uff8b\063\uff8b\064\uff8b\065" +
    "\uff8b\066\uff8b\067\uff8b\070\uff8b\073\uff8b\075\uff8b\076\uff8b" +
    "\102\uff8b\001\002\000\014\045\031\046\030\047\027\051" +
    "\025\104\024\001\002\000\004\042\252\001\002\000\004" +
    "\022\253\001\002\000\006\030\254\103\255\001\002\000" +
    "\024\007\053\020\055\022\043\023\046\036\042\043\045" +
    "\053\044\054\052\076\057\001\002\000\060\007\uffab\020" +
    "\uffab\022\uffab\023\uffab\036\uffab\043\uffab\045\uffab\047\uffab" +
    "\053\uffab\054\uffab\055\uffab\057\uffab\060\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\067\uffab\070\uffab\073\uffab\075\uffab" +
    "\076\uffab\102\uffab\001\002\000\004\103\257\001\002\000" +
    "\060\007\uffaa\020\uffaa\022\uffaa\023\uffaa\036\uffaa\043\uffaa" +
    "\045\uffaa\047\uffaa\053\uffaa\054\uffaa\055\uffaa\057\uffaa\060" +
    "\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa" +
    "\073\uffaa\075\uffaa\076\uffaa\102\uffaa\001\002\000\004\022" +
    "\261\001\002\000\004\077\262\001\002\000\004\102\263" +
    "\001\002\000\006\064\266\075\264\001\002\000\004\042" +
    "\274\001\002\000\004\102\273\001\002\000\016\007\053" +
    "\020\055\022\074\023\046\043\045\076\075\001\002\000" +
    "\010\005\100\007\101\042\270\001\002\000\052\007\053" +
    "\020\055\022\235\023\046\036\042\043\045\045\207\047" +
    "\205\053\044\054\052\055\217\057\234\060\213\063\231" +
    "\065\011\066\232\067\223\070\227\073\215\076\057\001" +
    "\002\000\056\007\053\020\055\022\235\023\046\036\042" +
    "\043\045\045\207\047\205\053\044\054\052\055\217\057" +
    "\234\060\213\063\231\064\266\065\011\066\232\067\223" +
    "\070\227\073\215\075\264\076\057\001\002\000\004\102" +
    "\uff86\001\002\000\060\007\uff87\020\uff87\022\uff87\023\uff87" +
    "\036\uff87\043\uff87\045\uff87\047\uff87\053\uff87\054\uff87\055" +
    "\uff87\057\uff87\060\uff87\063\uff87\064\uff87\065\uff87\066\uff87" +
    "\067\uff87\070\uff87\073\uff87\075\uff87\076\uff87\102\uff87\001" +
    "\002\000\052\007\053\020\055\022\235\023\046\036\042" +
    "\043\045\045\207\047\205\053\044\054\052\055\217\057" +
    "\234\060\213\063\231\065\011\066\232\067\223\070\227" +
    "\073\215\076\057\001\002\000\054\007\053\020\055\022" +
    "\235\023\046\036\042\043\045\045\207\047\205\053\044" +
    "\054\052\055\217\057\234\060\213\063\231\065\011\066" +
    "\232\067\223\070\227\073\215\076\057\102\uff85\001\002" +
    "\000\010\022\300\023\301\077\277\001\002\000\004\103" +
    "\306\001\002\000\004\077\304\001\002\000\004\077\302" +
    "\001\002\000\004\103\303\001\002\000\060\007\uff90\020" +
    "\uff90\022\uff90\023\uff90\036\uff90\043\uff90\045\uff90\047\uff90" +
    "\053\uff90\054\uff90\055\uff90\057\uff90\060\uff90\063\uff90\064" +
    "\uff90\065\uff90\066\uff90\067\uff90\070\uff90\073\uff90\075\uff90" +
    "\076\uff90\102\uff90\001\002\000\004\103\305\001\002\000" +
    "\060\007\uff8f\020\uff8f\022\uff8f\023\uff8f\036\uff8f\043\uff8f" +
    "\045\uff8f\047\uff8f\053\uff8f\054\uff8f\055\uff8f\057\uff8f\060" +
    "\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f" +
    "\073\uff8f\075\uff8f\076\uff8f\102\uff8f\001\002\000\060\007" +
    "\uff91\020\uff91\022\uff91\023\uff91\036\uff91\043\uff91\045\uff91" +
    "\047\uff91\053\uff91\054\uff91\055\uff91\057\uff91\060\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\073\uff91" +
    "\075\uff91\076\uff91\102\uff91\001\002\000\060\007\uffe6\020" +
    "\uffe6\022\uffe6\023\uffe6\036\uffe6\043\uffe6\045\uffe6\047\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\057\uffe6\060\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\073\uffe6\075\uffe6" +
    "\076\uffe6\102\uffe6\001\002\000\024\007\053\020\055\022" +
    "\043\023\046\036\042\043\045\053\044\054\052\076\057" +
    "\001\002\000\060\007\uff84\020\uff84\022\uff84\023\uff84\036" +
    "\uff84\043\uff84\045\uff84\047\uff84\053\uff84\054\uff84\055\uff84" +
    "\057\uff84\060\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067" +
    "\uff84\070\uff84\073\uff84\075\uff84\076\uff84\102\uff84\001\002" +
    "\000\004\103\313\001\002\000\060\007\uff83\020\uff83\022" +
    "\uff83\023\uff83\036\uff83\043\uff83\045\uff83\047\uff83\053\uff83" +
    "\054\uff83\055\uff83\057\uff83\060\uff83\063\uff83\064\uff83\065" +
    "\uff83\066\uff83\067\uff83\070\uff83\073\uff83\075\uff83\076\uff83" +
    "\102\uff83\001\002\000\024\007\053\020\055\022\043\023" +
    "\046\036\042\043\045\053\044\054\052\076\057\001\002" +
    "\000\004\077\316\001\002\000\004\102\317\001\002\000" +
    "\052\007\053\020\055\022\235\023\046\036\042\043\045" +
    "\045\207\047\205\053\044\054\052\055\217\057\234\060" +
    "\213\063\231\065\011\066\232\067\223\070\227\073\215" +
    "\076\057\001\002\000\054\007\053\020\055\022\235\023" +
    "\046\036\042\043\045\045\207\047\205\053\044\054\052" +
    "\055\217\057\234\060\213\063\231\065\011\066\232\067" +
    "\223\070\227\073\215\076\057\102\321\001\002\000\062" +
    "\007\uff8c\020\uff8c\022\uff8c\023\uff8c\036\uff8c\043\uff8c\045" +
    "\uff8c\047\uff8c\053\uff8c\054\uff8c\055\uff8c\056\322\057\uff8c" +
    "\060\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070" +
    "\uff8c\073\uff8c\075\uff8c\076\uff8c\102\uff8c\001\002\000\004" +
    "\102\324\001\002\000\060\007\uff8e\020\uff8e\022\uff8e\023" +
    "\uff8e\036\uff8e\043\uff8e\045\uff8e\047\uff8e\053\uff8e\054\uff8e" +
    "\055\uff8e\057\uff8e\060\uff8e\063\uff8e\064\uff8e\065\uff8e\066" +
    "\uff8e\067\uff8e\070\uff8e\073\uff8e\075\uff8e\076\uff8e\102\uff8e" +
    "\001\002\000\052\007\053\020\055\022\235\023\046\036" +
    "\042\043\045\045\207\047\205\053\044\054\052\055\217" +
    "\057\234\060\213\063\231\065\011\066\232\067\223\070" +
    "\227\073\215\076\057\001\002\000\054\007\053\020\055" +
    "\022\235\023\046\036\042\043\045\045\207\047\205\053" +
    "\044\054\052\055\217\057\234\060\213\063\231\065\011" +
    "\066\232\067\223\070\227\073\215\076\057\102\326\001" +
    "\002\000\060\007\uff8d\020\uff8d\022\uff8d\023\uff8d\036\uff8d" +
    "\043\uff8d\045\uff8d\047\uff8d\053\uff8d\054\uff8d\055\uff8d\057" +
    "\uff8d\060\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\070\uff8d\073\uff8d\075\uff8d\076\uff8d\102\uff8d\001\002\000" +
    "\014\045\031\046\030\047\027\051\025\104\024\001\002" +
    "\000\004\042\331\001\002\000\004\022\332\001\002\000" +
    "\004\103\333\001\002\000\060\007\uff97\020\uff97\022\uff97" +
    "\023\uff97\036\uff97\043\uff97\045\uff97\047\uff97\053\uff97\054" +
    "\uff97\055\uff97\057\uff97\060\uff97\063\uff97\064\uff97\065\uff97" +
    "\066\uff97\067\uff97\070\uff97\073\uff97\075\uff97\076\uff97\102" +
    "\uff97\001\002\000\004\022\335\001\002\000\004\042\336" +
    "\001\002\000\004\061\337\001\002\000\004\042\340\001" +
    "\002\000\004\062\341\001\002\000\004\076\342\001\002" +
    "\000\014\007\343\020\055\022\352\043\045\076\353\001" +
    "\002\000\006\020\055\043\045\001\002\000\012\005\356" +
    "\007\357\077\375\105\374\001\002\000\022\005\uffcb\007" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\077\uffcb\105\uffcb" +
    "\001\002\000\022\005\uffd2\007\uffd2\011\363\012\362\013" +
    "\361\014\364\077\uffd2\105\uffd2\001\002\000\022\005\uffc6" +
    "\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\077\uffc6\105" +
    "\uffc6\001\002\000\022\005\uffcd\007\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\077\uffcd\105\uffcd\001\002\000\022\005" +
    "\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\077\uffc5" +
    "\105\uffc5\001\002\000\032\005\uffca\006\372\007\uffca\010" +
    "\373\011\uffca\012\uffca\013\uffca\014\uffca\076\104\077\uffca" +
    "\100\105\105\uffca\001\002\000\014\007\343\020\055\022" +
    "\352\043\045\076\353\001\002\000\010\005\356\007\357" +
    "\077\355\001\002\000\022\005\uffcc\007\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\077\uffcc\105\uffcc\001\002\000\014" +
    "\007\343\020\055\022\352\043\045\076\353\001\002\000" +
    "\014\007\343\020\055\022\352\043\045\076\353\001\002" +
    "\000\022\005\uffd3\007\uffd3\011\363\012\362\013\361\014" +
    "\364\077\uffd3\105\uffd3\001\002\000\014\007\343\020\055" +
    "\022\352\043\045\076\353\001\002\000\014\007\343\020" +
    "\055\022\352\043\045\076\353\001\002\000\014\007\343" +
    "\020\055\022\352\043\045\076\353\001\002\000\014\007" +
    "\343\020\055\022\352\043\045\076\353\001\002\000\022" +
    "\005\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\077" +
    "\uffd1\105\uffd1\001\002\000\022\005\uffd0\007\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\077\uffd0\105\uffd0\001\002\000" +
    "\022\005\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\077\uffcf\105\uffcf\001\002\000\022\005\uffce\007\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\077\uffce\105\uffce\001\002" +
    "\000\022\005\uffd4\007\uffd4\011\363\012\362\013\361\014" +
    "\364\077\uffd4\105\uffd4\001\002\000\022\005\uffc9\007\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\077\uffc9\105\uffc9\001" +
    "\002\000\022\005\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\077\uffc8\105\uffc8\001\002\000\014\007\343\020" +
    "\055\022\352\043\045\076\353\001\002\000\004\102\376" +
    "\001\002\000\052\007\053\020\055\022\235\023\046\036" +
    "\042\043\045\045\207\047\205\053\044\054\052\055\217" +
    "\057\234\060\213\063\231\065\011\066\232\067\223\070" +
    "\227\073\215\076\057\001\002\000\054\007\053\020\055" +
    "\022\235\023\046\036\042\043\045\045\207\047\205\053" +
    "\044\054\052\055\217\057\234\060\213\063\231\065\011" +
    "\066\232\067\223\070\227\073\215\076\057\102\u0100\001" +
    "\002\000\060\007\uff8a\020\uff8a\022\uff8a\023\uff8a\036\uff8a" +
    "\043\uff8a\045\uff8a\047\uff8a\053\uff8a\054\uff8a\055\uff8a\057" +
    "\uff8a\060\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a" +
    "\070\uff8a\073\uff8a\075\uff8a\076\uff8a\102\uff8a\001\002\000" +
    "\012\005\356\007\357\077\u0103\105\u0102\001\002\000\014" +
    "\007\343\020\055\022\352\043\045\076\353\001\002\000" +
    "\004\102\u0104\001\002\000\052\007\053\020\055\022\235" +
    "\023\046\036\042\043\045\045\207\047\205\053\044\054" +
    "\052\055\217\057\234\060\213\063\231\065\011\066\232" +
    "\067\223\070\227\073\215\076\057\001\002\000\054\007" +
    "\053\020\055\022\235\023\046\036\042\043\045\045\207" +
    "\047\205\053\044\054\052\055\217\057\234\060\213\063" +
    "\231\065\011\066\232\067\223\070\227\073\215\076\057" +
    "\102\u0106\001\002\000\060\007\uff89\020\uff89\022\uff89\023" +
    "\uff89\036\uff89\043\uff89\045\uff89\047\uff89\053\uff89\054\uff89" +
    "\055\uff89\057\uff89\060\uff89\063\uff89\064\uff89\065\uff89\066" +
    "\uff89\067\uff89\070\uff89\073\uff89\075\uff89\076\uff89\102\uff89" +
    "\001\002\000\010\005\356\007\357\077\u0108\001\002\000" +
    "\004\102\u0109\001\002\000\052\007\053\020\055\022\235" +
    "\023\046\036\042\043\045\045\207\047\205\053\044\054" +
    "\052\055\217\057\234\060\213\063\231\065\011\066\232" +
    "\067\223\070\227\073\215\076\057\001\002\000\054\007" +
    "\053\020\055\022\235\023\046\036\042\043\045\045\207" +
    "\047\205\053\044\054\052\055\217\057\234\060\213\063" +
    "\231\065\011\066\232\067\223\070\227\073\215\076\057" +
    "\102\u010b\001\002\000\060\007\uff88\020\uff88\022\uff88\023" +
    "\uff88\036\uff88\043\uff88\045\uff88\047\uff88\053\uff88\054\uff88" +
    "\055\uff88\057\uff88\060\uff88\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\070\uff88\073\uff88\075\uff88\076\uff88\102\uff88" +
    "\001\002\000\022\005\uffc7\007\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\077\uffc7\105\uffc7\001\002\000\004\022\u010e" +
    "\001\002\000\004\100\u010f\001\002\000\004\020\u0110\001" +
    "\002\000\004\101\u0111\001\002\000\004\030\u0112\001\002" +
    "\000\024\007\053\020\055\022\043\023\046\036\042\043" +
    "\045\053\044\054\052\076\057\001\002\000\006\103\uff92" +
    "\105\u0116\001\002\000\004\103\u0115\001\002\000\060\007" +
    "\uff94\020\uff94\022\uff94\023\uff94\036\uff94\043\uff94\045\uff94" +
    "\047\uff94\053\uff94\054\uff94\055\uff94\057\uff94\060\uff94\063" +
    "\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\073\uff94" +
    "\075\uff94\076\uff94\102\uff94\001\002\000\024\007\053\020" +
    "\055\022\043\023\046\036\042\043\045\053\044\054\052" +
    "\076\057\001\002\000\004\103\uff93\001\002\000\004\022" +
    "\u0119\001\002\000\004\100\u011a\001\002\000\004\020\u011b" +
    "\001\002\000\004\101\u011c\001\002\000\004\030\u011d\001" +
    "\002\000\024\007\053\020\055\022\043\023\046\036\042" +
    "\043\045\053\044\054\052\076\057\001\002\000\004\103" +
    "\u011f\001\002\000\060\007\uff95\020\uff95\022\uff95\023\uff95" +
    "\036\uff95\043\uff95\045\uff95\047\uff95\053\uff95\054\uff95\055" +
    "\uff95\057\uff95\060\uff95\063\uff95\064\uff95\065\uff95\066\uff95" +
    "\067\uff95\070\uff95\073\uff95\075\uff95\076\uff95\102\uff95\001" +
    "\002\000\052\007\053\020\055\022\235\023\046\036\042" +
    "\043\045\045\207\047\205\053\044\054\052\055\217\057" +
    "\234\060\213\063\231\065\011\066\232\067\223\070\227" +
    "\073\215\076\057\001\002\000\054\007\053\020\055\022" +
    "\235\023\046\036\042\043\045\045\207\047\205\053\044" +
    "\054\052\055\217\057\234\060\213\063\231\065\011\066" +
    "\232\067\223\070\227\073\215\076\057\102\uffa3\001\002" +
    "\000\004\022\u0123\001\002\000\004\102\u0124\001\002\000" +
    "\052\007\053\020\055\022\235\023\046\036\042\043\045" +
    "\045\207\047\205\053\044\054\052\055\217\057\234\060" +
    "\213\063\231\065\011\066\232\067\223\070\227\073\215" +
    "\076\057\001\002\000\054\007\053\020\055\022\235\023" +
    "\046\036\042\043\045\045\207\047\205\053\044\054\052" +
    "\055\217\057\234\060\213\063\231\065\011\066\232\067" +
    "\223\070\227\073\215\076\057\102\uff9f\001\002\000\004" +
    "\022\u0127\001\002\000\004\102\u0128\001\002\000\052\007" +
    "\053\020\055\022\235\023\046\036\042\043\045\045\207" +
    "\047\205\053\044\054\052\055\217\057\234\060\213\063" +
    "\231\065\011\066\232\067\223\070\227\073\215\076\057" +
    "\001\002\000\054\007\053\020\055\022\235\023\046\036" +
    "\042\043\045\045\207\047\205\053\044\054\052\055\217" +
    "\057\234\060\213\063\231\065\011\066\232\067\223\070" +
    "\227\073\215\076\057\102\uffa1\001\002\000\004\022\u012b" +
    "\001\002\000\004\102\u012c\001\002\000\052\007\053\020" +
    "\055\022\235\023\046\036\042\043\045\045\207\047\205" +
    "\053\044\054\052\055\217\057\234\060\213\063\231\065" +
    "\011\066\232\067\223\070\227\073\215\076\057\001\002" +
    "\000\054\007\053\020\055\022\235\023\046\036\042\043" +
    "\045\045\207\047\205\053\044\054\052\055\217\057\234" +
    "\060\213\063\231\065\011\066\232\067\223\070\227\073" +
    "\215\076\057\102\uffa0\001\002\000\004\022\u012f\001\002" +
    "\000\004\102\u0130\001\002\000\004\102\uff9e\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\006\004\004\056\003\001\001\000\014\005" +
    "\013\006\007\011\012\034\014\055\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\016\011\012\034\014\055\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\012\050" +
    "\013\040\014\057\015\061\016\055\025\060\026\047\030" +
    "\046\031\037\032\053\037\036\042\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\135" +
    "\001\001\000\002\001\001\000\004\014\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\124\014\057\015\123\016\055\025\060\026\047\037" +
    "\036\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\050\014\057\015\061\016\055\025\060" +
    "\026\047\030\065\031\037\032\053\037\036\042\035\001" +
    "\001\000\002\001\001\000\012\014\057\026\122\037\036" +
    "\042\035\001\001\000\012\014\057\026\121\037\036\042" +
    "\035\001\001\000\012\014\057\026\120\037\036\042\035" +
    "\001\001\000\012\014\057\026\072\037\036\042\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\075" +
    "\014\057\025\060\026\047\037\036\042\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\057\025\102" +
    "\026\047\037\036\042\035\001\001\000\014\014\057\025" +
    "\101\026\047\037\036\042\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\050\013\111\014\057\015" +
    "\061\016\055\025\060\026\047\030\046\031\037\032\053" +
    "\037\036\040\112\041\113\042\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\050\013\111" +
    "\014\057\015\061\016\055\025\060\026\047\030\046\031" +
    "\037\032\053\037\036\040\116\041\113\042\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\151\001\001" +
    "\000\004\027\135\001\001\000\004\033\146\001\001\000" +
    "\002\001\001\000\022\012\124\014\057\015\130\016\055" +
    "\025\060\026\047\037\036\042\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\012\134\014\057\015\133" +
    "\016\055\025\060\026\047\037\036\042\035\001\001\000" +
    "\002\001\001\000\004\027\135\001\001\000\016\012\144" +
    "\014\057\025\060\026\047\037\036\042\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\050\014\057\015\061" +
    "\016\055\025\060\026\047\030\147\031\037\032\053\037" +
    "\036\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\050\014\057\015\061\016\055\025\060\026" +
    "\047\030\152\031\037\032\053\037\036\042\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\050\014\057\015\061\016\055\025\060\026\047" +
    "\030\156\031\037\032\053\037\036\042\035\001\001\000" +
    "\002\001\001\000\022\012\134\014\057\015\160\016\055" +
    "\025\060\026\047\037\036\042\035\001\001\000\004\033" +
    "\165\001\001\000\004\033\162\001\001\000\030\012\050" +
    "\014\057\015\061\016\055\025\060\026\047\030\163\031" +
    "\037\032\053\037\036\042\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\050\014\057\015\061\016" +
    "\055\025\060\026\047\030\166\031\037\032\053\037\036" +
    "\042\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\007\217\010\221\012\050\014\057\015\061\016" +
    "\055\017\224\020\203\021\223\022\220\024\232\025\060" +
    "\026\047\030\225\031\037\032\053\034\213\035\215\037" +
    "\036\042\035\043\211\045\207\047\205\053\210\054\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\007\217\010\221\012\050" +
    "\014\057\015\061\016\055\020\203\021\223\022\220\024" +
    "\245\025\060\026\047\030\225\031\037\032\053\034\213" +
    "\035\215\037\036\042\035\043\211\045\207\047\205\053" +
    "\210\054\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\155\001\001" +
    "\000\032\012\050\013\236\014\057\015\061\016\055\025" +
    "\060\026\047\030\046\031\037\032\053\037\036\042\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\050\014\057\015\061\016\055\025\060\026\047\030\241" +
    "\031\037\032\053\037\036\042\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\007\217\010\221\012\050" +
    "\014\057\015\061\016\055\017\244\020\203\021\223\022" +
    "\220\024\232\025\060\026\047\030\225\031\037\032\053" +
    "\034\213\035\215\037\036\042\035\043\211\045\207\047" +
    "\205\053\210\054\227\001\001\000\062\007\217\010\221" +
    "\012\050\014\057\015\061\016\055\020\203\021\223\022" +
    "\220\024\245\025\060\026\047\030\225\031\037\032\053" +
    "\034\213\035\215\037\036\042\035\043\211\045\207\047" +
    "\205\053\210\054\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\012\050\013\255" +
    "\014\057\015\061\016\055\025\060\026\047\030\046\031" +
    "\037\032\053\037\036\042\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\266\014" +
    "\057\025\060\026\047\037\036\042\035\001\001\000\002" +
    "\001\001\000\064\007\217\010\221\012\050\014\057\015" +
    "\061\016\055\017\270\020\203\021\223\022\220\024\232" +
    "\025\060\026\047\030\225\031\037\032\053\034\213\035" +
    "\215\037\036\042\035\043\211\045\207\047\205\053\210" +
    "\054\227\001\001\000\064\007\217\010\221\012\050\014" +
    "\057\015\061\016\055\020\203\021\223\022\220\024\245" +
    "\025\060\026\047\030\225\031\037\032\053\034\213\035" +
    "\215\037\036\042\035\043\211\045\207\046\271\047\205" +
    "\053\210\054\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\007\217\010\221\012\050\014\057\015\061" +
    "\016\055\017\274\020\203\021\223\022\220\024\232\025" +
    "\060\026\047\030\225\031\037\032\053\034\213\035\215" +
    "\037\036\042\035\043\211\045\207\047\205\053\210\054" +
    "\227\001\001\000\062\007\217\010\221\012\050\014\057" +
    "\015\061\016\055\020\203\021\223\022\220\024\245\025" +
    "\060\026\047\030\225\031\037\032\053\034\213\035\215" +
    "\037\036\042\035\043\211\045\207\047\205\053\210\054" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\012\050\013\311\014\057\015" +
    "\061\016\055\025\060\026\047\030\046\031\037\032\053" +
    "\037\036\042\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\050\014\057\015\061" +
    "\016\055\025\060\026\047\030\314\031\037\032\053\037" +
    "\036\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\007\217\010\221\012\050\014\057\015\061\016" +
    "\055\017\317\020\203\021\223\022\220\024\232\025\060" +
    "\026\047\030\225\031\037\032\053\034\213\035\215\037" +
    "\036\042\035\043\211\045\207\047\205\053\210\054\227" +
    "\001\001\000\062\007\217\010\221\012\050\014\057\015" +
    "\061\016\055\020\203\021\223\022\220\024\245\025\060" +
    "\026\047\030\225\031\037\032\053\034\213\035\215\037" +
    "\036\042\035\043\211\045\207\047\205\053\210\054\227" +
    "\001\001\000\004\023\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\007\217\010\221\012\050\014\057" +
    "\015\061\016\055\017\324\020\203\021\223\022\220\024" +
    "\232\025\060\026\047\030\225\031\037\032\053\034\213" +
    "\035\215\037\036\042\035\043\211\045\207\047\205\053" +
    "\210\054\227\001\001\000\062\007\217\010\221\012\050" +
    "\014\057\015\061\016\055\020\203\021\223\022\220\024" +
    "\245\025\060\026\047\030\225\031\037\032\053\034\213" +
    "\035\215\037\036\042\035\043\211\045\207\047\205\053" +
    "\210\054\227\001\001\000\002\001\001\000\004\036\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\344\037\346\042\350\050\343" +
    "\051\345\052\347\001\001\000\004\014\u010b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\344\037\346\042\350\050\353\051\345" +
    "\052\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\344\037\346\042\350\051\370\052\347\001\001" +
    "\000\014\014\344\037\346\042\350\051\357\052\347\001" +
    "\001\000\002\001\001\000\012\014\344\037\346\042\350" +
    "\052\367\001\001\000\012\014\344\037\346\042\350\052" +
    "\366\001\001\000\012\014\344\037\346\042\350\052\365" +
    "\001\001\000\012\014\344\037\346\042\350\052\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\344\037\346\042\350\050\u0100" +
    "\051\345\052\347\001\001\000\002\001\001\000\064\007" +
    "\217\010\221\012\050\014\057\015\061\016\055\017\376" +
    "\020\203\021\223\022\220\024\232\025\060\026\047\030" +
    "\225\031\037\032\053\034\213\035\215\037\036\042\035" +
    "\043\211\045\207\047\205\053\210\054\227\001\001\000" +
    "\062\007\217\010\221\012\050\014\057\015\061\016\055" +
    "\020\203\021\223\022\220\024\245\025\060\026\047\030" +
    "\225\031\037\032\053\034\213\035\215\037\036\042\035" +
    "\043\211\045\207\047\205\053\210\054\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\344\037\346" +
    "\042\350\050\u0106\051\345\052\347\001\001\000\002\001" +
    "\001\000\064\007\217\010\221\012\050\014\057\015\061" +
    "\016\055\017\u0104\020\203\021\223\022\220\024\232\025" +
    "\060\026\047\030\225\031\037\032\053\034\213\035\215" +
    "\037\036\042\035\043\211\045\207\047\205\053\210\054" +
    "\227\001\001\000\062\007\217\010\221\012\050\014\057" +
    "\015\061\016\055\020\203\021\223\022\220\024\245\025" +
    "\060\026\047\030\225\031\037\032\053\034\213\035\215" +
    "\037\036\042\035\043\211\045\207\047\205\053\210\054" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\007\217\010\221\012\050\014\057\015" +
    "\061\016\055\017\u0109\020\203\021\223\022\220\024\232" +
    "\025\060\026\047\030\225\031\037\032\053\034\213\035" +
    "\215\037\036\042\035\043\211\045\207\047\205\053\210" +
    "\054\227\001\001\000\062\007\217\010\221\012\050\014" +
    "\057\015\061\016\055\020\203\021\223\022\220\024\245" +
    "\025\060\026\047\030\225\031\037\032\053\034\213\035" +
    "\215\037\036\042\035\043\211\045\207\047\205\053\210" +
    "\054\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\050\013\u0112\014" +
    "\057\015\061\016\055\025\060\026\047\030\046\031\037" +
    "\032\053\037\036\042\035\044\u0113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\012\050" +
    "\013\u0112\014\057\015\061\016\055\025\060\026\047\030" +
    "\046\031\037\032\053\037\036\042\035\044\u0116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\050\013\u0112\014\057\015\061\016\055\025\060\026" +
    "\047\030\046\031\037\032\053\037\036\042\035\044\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\007" +
    "\217\010\221\012\050\014\057\015\061\016\055\017\u0120" +
    "\020\203\021\223\022\220\024\232\025\060\026\047\030" +
    "\225\031\037\032\053\034\213\035\215\037\036\042\035" +
    "\043\211\045\207\047\205\053\210\054\227\001\001\000" +
    "\062\007\217\010\221\012\050\014\057\015\061\016\055" +
    "\020\203\021\223\022\220\024\245\025\060\026\047\030" +
    "\225\031\037\032\053\034\213\035\215\037\036\042\035" +
    "\043\211\045\207\047\205\053\210\054\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\007\217\010\221" +
    "\012\050\014\057\015\061\016\055\017\u0124\020\203\021" +
    "\223\022\220\024\232\025\060\026\047\030\225\031\037" +
    "\032\053\034\213\035\215\037\036\042\035\043\211\045" +
    "\207\047\205\053\210\054\227\001\001\000\062\007\217" +
    "\010\221\012\050\014\057\015\061\016\055\020\203\021" +
    "\223\022\220\024\245\025\060\026\047\030\225\031\037" +
    "\032\053\034\213\035\215\037\036\042\035\043\211\045" +
    "\207\047\205\053\210\054\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\007\217\010\221\012\050\014" +
    "\057\015\061\016\055\017\u0128\020\203\021\223\022\220" +
    "\024\232\025\060\026\047\030\225\031\037\032\053\034" +
    "\213\035\215\037\036\042\035\043\211\045\207\047\205" +
    "\053\210\054\227\001\001\000\062\007\217\010\221\012" +
    "\050\014\057\015\061\016\055\020\203\021\223\022\220" +
    "\024\245\025\060\026\047\030\225\031\037\032\053\034" +
    "\213\035\215\037\036\042\035\043\211\045\207\047\205" +
    "\053\210\054\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\007\217\010\221\012\050\014\057\015\061" +
    "\016\055\017\u012c\020\203\021\223\022\220\024\232\025" +
    "\060\026\047\030\225\031\037\032\053\034\213\035\215" +
    "\037\036\042\035\043\211\045\207\047\205\053\210\054" +
    "\227\001\001\000\062\007\217\010\221\012\050\014\057" +
    "\015\061\016\055\020\203\021\223\022\220\024\245\025" +
    "\060\026\047\030\225\031\037\032\053\034\213\035\215" +
    "\037\036\042\035\043\211\045\207\047\205\053\210\054" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;
    
    HashMap<String, ArrayList<String>> TablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
    String globalHash = "globalTS";

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
 TablaSimbolos.put(globalHash, new ArrayList<String>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= NT$0 BODY 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Body "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BODY ::= BODY STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= FUNC_STAT_DEF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= DECL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= error ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= error UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINE ::= LINER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINE ::= LINE LINER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINER ::= ASIG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINER ::= DECLOC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINER ::= DECL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINER ::= FOR_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINER ::= WHILE_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINER ::= SWITCH_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LINER ::= IF_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LINER ::= DECLARRAY_WITH_VALUES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LINER ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LINER ::= PARAMDECL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINER ::= PRINTLN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LINER ::= RETURN_STATEMENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINER",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NUMBERS ::= INTEGER_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NUMBERS ::= FLOTANTE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBERS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BOOL ::= TRUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BOOL ::= FALSE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= EXP_REL_LOG ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP_ARIT ::= EXP_ARIT PLUS TERM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP_ARIT ::= EXP_ARIT MINUS TERM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP_ARIT ::= TERM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TERM ::= TERM TIMES FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TERM ::= TERM DIV FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERM ::= TERM POT FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TERM ::= TERM MOD FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERM ::= FACTOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FACTOR ::= PARENTA EXP_ARIT PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FACTOR ::= MINUS NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= STRING_LITERAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FACTOR ::= IDENTIFIER MINUSM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FACTOR ::= IDENTIFIER PLUSP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTOR ::= INV_FUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FACTOR ::= INV_ARRAY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP_ARIT_INTEGER ::= EXP_ARIT_INTEGER PLUS TERM_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP_ARIT_INTEGER ::= EXP_ARIT_INTEGER MINUS TERM_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP_ARIT_INTEGER ::= TERM_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_ARIT_INTEGER",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TERM_INTEGER ::= TERM_INTEGER TIMES FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TERM_INTEGER ::= TERM_INTEGER DIV FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TERM_INTEGER ::= TERM_INTEGER POT FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TERM_INTEGER ::= TERM_INTEGER MOD FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TERM_INTEGER ::= FACTOR_INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM_INTEGER",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FACTOR_INTEGER ::= PARENTA EXP_ARIT_INTEGER PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FACTOR_INTEGER ::= NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FACTOR_INTEGER ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FACTOR_INTEGER ::= IDENTIFIER PLUSP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FACTOR_INTEGER ::= IDENTIFIER MINUSM 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FACTOR_INTEGER ::= MINUS NUMBERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FACTOR_INTEGER ::= INV_FUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTOR_INTEGER ::= INV_ARRAY 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR_INTEGER",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP_REL_LOG ::= EXP_REL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL_LOG",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP_REL_LOG ::= EXP_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL_LOG",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP_REL ::= EXP_ARIT OPER_REL EXP_ARIT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP_REL ::= PARENTA EXP_REL PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP_REL ::= NOT PARENTA EXP_REL PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP_REL ::= BOOL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_REL",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_LOG ::= OPER_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_LOG ::= EXP_REL OPERA_LOG EXP_REL_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP_LOG ::= PARENTA EXP_REL OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP_LOG ::= NOT PARENTA EXP_REL OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP_LOG ::= IDENTIFIER OPERA_LOG EXP_REL_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP_LOG ::= PARENTA IDENTIFIER OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP_LOG ::= NOT PARENTA IDENTIFIER OPERA_LOG EXP_REL_LOG PARENTC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_LOG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPER_LOG ::= EXP_ARIT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_LOG",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPER_REL ::= GREATERT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPER_REL ::= GREATERE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPER_REL ::= LOWERT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPER_REL ::= LOWERE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPER_REL ::= EQEQ 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPER_REL ::= NOTEQUALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPER_REL",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERA_LOG ::= DISJUNTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERA_LOG",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERA_LOG ::= CONJUNTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERA_LOG",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIG ::= IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;
		 System.out.println("Asignacion "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER ENDLINE 
            {
              String RESULT =null;
		 System.out.println("Declaracion de variables globales "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECL ::= GLOB SEP TYPES SEP IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;
		 System.out.println("Declaracion de variables globales con asig"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER ENDLINE 
            {
              String RESULT =null;
		 System.out.println("Declaracion de variables LOCALES "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLOC ::= LOC SEP TYPES SEP IDENTIFIER EQ VALUE ENDLINE 
            {
              String RESULT =null;
		 System.out.println("Declaracion de variables LOCALES con asig"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLOC",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TYPES ::= CHAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPES ::= FLOAT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPES ::= STRING 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPES ::= INT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TYPES ::= BOOOLEANF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALUE ::= EXP_REL_LOG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCTION_STATEMENT ::= FUNC SEP INT SEP MAIN UNDERS LINE 
            {
              String RESULT =null;
		 System.out.println("Main"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNCTION_STATEMENT ::= FUNC SEP INT SEP IDENTIFIER UNDERS LINE 
            {
              String RESULT =null;
		 System.out.println("declaracion de funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNCTION_STATEMENT ::= FUNC SEP FLOAT SEP IDENTIFIER UNDERS LINE 
            {
              String RESULT =null;
		 System.out.println("declaracion de funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCTION_STATEMENT ::= FUNC SEP BOOOLEANF SEP IDENTIFIER UNDERS LINE 
            {
              String RESULT =null;
		 System.out.println("declaracion de funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCTION_STATEMENT ::= FUNC SEP CHAR SEP IDENTIFIER UNDERS LINE 
            {
              String RESULT =null;
		 System.out.println("declaracion de funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCTION_STATEMENT ::= FUNC SEP STRING SEP IDENTIFIER UNDERS 
            {
              String RESULT =null;
		 System.out.println("declaracion de funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_STATEMENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNC_STAT_DEF ::= FUNCTION_STATEMENT UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_STAT_DEF",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INV_FUNC ::= IDENTIFIER PARENTA PARENTC 
            {
              String RESULT =null;
		 System.out.println("Invocacion de funcion sin parametros."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_FUNC",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INV_FUNC ::= IDENTIFIER PARENTA PARAMS PARENTC 
            {
              String RESULT =null;
		 System.out.println("Invocacion de funcion con parametros."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_FUNC",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMS ::= PARAMETER COMA PARAMS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMS ::= PARAMETER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMETER ::= VALUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMDECL ::= PARAM SEP TYPES SEP IDENTIFIER ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMDECL",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INV_ARRAY ::= IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INV_ARRAY",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARRAY_WITH_VALUES ::= CHAR SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC EQ VALUE_LIST ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARRAY_WITH_VALUES",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARRAY_WITH_VALUES ::= INT SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC EQ VALUE_LIST ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARRAY_WITH_VALUES",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALUE_LIST ::= VALUE COMA VALUE_LIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_LIST",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALUE_LIST ::= VALUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_LIST",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PRINTLN ::= PRINTF PARENTA PARENTC ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PRINTLN ::= PRINTF PARENTA STRING_LITERAL PARENTC ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PRINTLN ::= PRINTF PARENTA IDENTIFIER PARENTC ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IF_STATEMENT ::= IF PARENTA EXP_REL_LOG PARENTC UNDERS LINE UNDERS ELSE_STATEMENT 
            {
              String RESULT =null;
		 System.out.println("if statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELSE_STATEMENT ::= ELSE UNDERS LINE UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ELSE_STATEMENT ::= 
            {
              String RESULT =null;
		 System.out.println("else statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_STATEMENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WHILE_STATEMENT ::= WHILE PARENTA EXP_REL_LOG PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;
		 System.out.println("WHILE statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STATEMENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FOR_STATEMENT ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT_INTEGER PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;
		 System.out.println("FOR statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FOR_STATEMENT ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT_INTEGER COMA EXP_ARIT_INTEGER PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;
		 System.out.println("FOR statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FOR_STATEMENT ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTA EXP_ARIT_INTEGER COMA EXP_ARIT_INTEGER COMA EXP_ARIT_INTEGER PARENTC UNDERS LINE UNDERS 
            {
              String RESULT =null;
		 System.out.println("FOR statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SWITCH_STATEMENT ::= SWITCH PARENTA IDENTIFIER PARENTC UNDERS CASE_LIST UNDERS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_STATEMENT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CASE_LIST ::= CASE EXP_ARIT SEP LINE CASE_LIST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CASE_LIST ::= DEFAULT SEP LINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_LIST",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // RETURN_STATEMENT ::= RETURN ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STATEMENT",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // RETURN_STATEMENT ::= RETURN SEP VALUE ENDLINE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STATEMENT",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
