package py01compiladores;
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

/* define how to connect to the scanner! */
//init with {: s.init(); :};
//scan with {: return s.next_token(); :};
init with {::};
scan with {:return lex.next_token();:};


/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, PLUSP, MINUS, MINUSM, DIV, POT, MOD, TIMES, UMINUS, LPAREN, RPAREN, INTEGER_LITERAL;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal            IDENTIFIER, STRING_LITERAL, EQEQ, BREAK, BOOLEAN, ABSTRACT, EQ, DOT;
terminal            GREATERT, LOWERT, GREATERE, LOWERE, NOT, NOTEQUALS, CONJUNTION, DISJUNTION, SEP;
terminal            FLOTANTE, ENTERO, INT, FLOAT, CHAR, CHARC, STRING, ARRAY;
terminal            TRUE,FALSE;
terminal            IF, ELSE, WHILE, FOR, IN, RANGE, SWICH, CASE;
terminal            GLOB, LOC, RETURN, PRINTF, FUNC, MAIN, PARAM, READ, DEFAULT;
terminal            PARENTA, PARENTC, PARENTCA, PARENTCC, UNDERS;
terminal            ENDLINE;
terminal            SEMICOLON;

/* Non-terminals */
non terminal expr_list;
non terminal Integer expr; // used to store evaluated subexpressions
non terminal String PROGRAMA, BODY, LINE, EXP, ASIG, FUNCTION_STATEMENT;

/* Precedences */

precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIV;
precedence left UMINUS;

/* The grammar rules */
start with PROGRAMA;
//Inicial.
PROGRAMA  ::= BODY;

//cuerpo del programa.
BODY ::= BODY LINE | LINE;

//Lineas del codigo.
LINE::= EXP ENDLINE | ASIG | FUNCTION_STATEMENT;

//Expresiones.
EXP      ::= EXP PLUS EXP {: System.out.println("+");:}
         | EXP MINUS EXP {: System.out.println("-");:} 
         | EXP TIMES EXP {: System.out.println("*");:}
         | EXP DIV EXP {: System.out.println("/");:}
         | INTEGER_LITERAL {: System.out.println("Numero: "); :};

//Asignacion de valores a una variable.
ASIG::= IDENTIFIER EQ INTEGER_LITERAL ENDLINE  {: System.out.println("Asignacion int "); :};
ASIG::= IDENTIFIER EQ STRING_LITERAL ENDLINE  {: System.out.println("Asignacion string"); :};

//Declaracion de funciones.
FUNCTION_STATEMENT::= FUNC SEP INT SEP MAIN UNDERS LINE UNDERS;
FUNCTION_STATEMENT::= FUNC SEP INT SEP IDENTIFIER UNDERS LINE UNDERS;