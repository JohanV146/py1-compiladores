package py01compiladores;
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 
:}

/* define how to connect to the scanner! */
//init with {: s.init(); :};
//scan with {: return s.next_token(); :};
init with {::};
scan with {:return lex.next_token();:};


/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, PLUSP, MINUS, MINUSM, DIV, POT, MOD, TIMES, UMINUS, LPAREN, RPAREN, INTEGER_LITERAL;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal            IDENTIFIER, STRING_LITERAL, EQEQ, BREAK, BOOLEAN, ABSTRACT, EQ, DOT;
terminal            GREATERT, LOWERT, GREATERE, LOWERE, NOT, NOTEQUALS, CONJUNTION, DISJUNTION, SEP;
terminal            FLOTANTE, ENTERO, INT, FLOAT, CHAR, CHARC, STRING, ARRAY;
terminal            TRUE,FALSE;
terminal            IF, ELSE, WHILE, FOR, IN, RANGE, SWITCH, CASE;
terminal            GLOB, LOC, RETURN, PRINTF, FUNC, MAIN, PARAM, READ, DEFAULT;
terminal            PARENTA, PARENTC, PARENTCA, PARENTCC, UNDERS;
terminal            ENDLINE, BOOOLEANF, COMA;
terminal            SEMICOLON;

/* Non-terminals */
non terminal expr_list;
non terminal Integer expr; // used to store evaluated subexpressions
non terminal String PROGRAMA, BODY, STATEMENT, EXP, ASIG, FUNCTION_STATEMENT, EXP_ARIT, VALUE, NUMBERS, EXP_REL, BOOL, LINE, FOR_STATEMENT, WHILE_STATEMENT, IF_STATEMENT, ELSE_STATEMENT, LINER, TERM, FACTOR, OPER_REL, EXP_REL_LOG;
non terminal String EXP_LOG, OPER_LOG, OPERA_LOG, DECL, DECLOC, TYPES, INV_FUNC, PARAMS, PARAMETER, INV_ARRAY, DECLARRAY_WITH_VALUES, VALUE_LIST, SWITCH_STATEMENT, CASE_LIST;

/* Precedences */

precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIV;
precedence left UMINUS;


/* The grammar rules */
start with PROGRAMA;
//Inicial.
PROGRAMA  ::= BODY;

//cuerpo del programa.
BODY ::= BODY STATEMENT | STATEMENT;

//Lineas del codigo.
STATEMENT::= 
      LINER
     | FUNCTION_STATEMENT
     | DECL
     | error ENDLINE
     | error UNDERS;

//Lineas recursivas.
LINE::=
      LINER | LINE LINER;
//Cuerpo de los statements.
LINER::=
        ASIG
      | DECLOC
      | FOR_STATEMENT
      | WHILE_STATEMENT
      | SWITCH_STATEMENT
      | IF_STATEMENT
      | DECLARRAY_WITH_VALUES
      | EXP;

//===============================================================================Expresiones Aritmeticas==================================================================
//Numeros
NUMBERS ::= INTEGER_LITERAL | FLOTANTE;
//BOOLEANOS
BOOL ::= TRUE | FALSE;

//Expresiones.
EXP::= EXP_REL_LOG ENDLINE;

//expresiones aritmeticas.
EXP_ARIT    ::= EXP_ARIT    PLUS    TERM
              | EXP_ARIT    MINUS   TERM  
              | TERM;

TERM    ::=    TERM TIMES FACTOR
            |   TERM DIV FACTOR
            |   FACTOR;
FACTOR  ::=  PARENTA EXP_ARIT PARENTC
            | NUMBERS
            | STRING_LITERAL
            | IDENTIFIER
            | INV_FUNC
            | INV_ARRAY;
//===============================================================================Expresiones Aritmeticas End==================================================================

//===============================================================================Expresiones relacionales==================================================================
//operaciones relacionales logicas.
EXP_REL_LOG ::= EXP_REL | EXP_LOG;

EXP_REL    ::= EXP_ARIT    OPER_REL    EXP_ARIT 
            | PARENTA EXP_REL PARENTC
            | BOOL;

//Operador logico.
EXP_LOG ::= OPER_LOG 
          | EXP_REL  OPERA_LOG EXP_REL_LOG
          | PARENTA EXP_REL  OPERA_LOG EXP_REL_LOG PARENTC //parentesis para las expresiones.
          | IDENTIFIER OPERA_LOG EXP_REL_LOG
          | PARENTA IDENTIFIER  OPERA_LOG EXP_REL_LOG PARENTC; //parentesis para los identificadores.

//operando logico.
OPER_LOG ::= EXP_ARIT;

//Operadores relacionales.
OPER_REL ::= GREATERT | GREATERE |  LOWERT | LOWERE | EQEQ;
OPERA_LOG ::= DISJUNTION | CONJUNTION;
//===============================================================================Expresiones Relacionales End==================================================================

//===============================================================================Asignaciones y declaraciones==================================================================
//Asignacion de valores a una variable.
ASIG::= IDENTIFIER EQ VALUE ENDLINE {: System.out.println("Asignacion "); :};

DECL::= GLOB SEP TYPES SEP IDENTIFIER ENDLINE {: System.out.println("Declaracion de variables globales "); :};
DECL::= GLOB SEP TYPES SEP IDENTIFIER EQ VALUE ENDLINE {: System.out.println("Declaracion de variables globales con asig"); :};

DECLOC::= LOC SEP TYPES SEP IDENTIFIER ENDLINE {: System.out.println("Declaracion de variables LOCALES "); :};
DECLOC::= LOC SEP TYPES SEP IDENTIFIER EQ VALUE ENDLINE {: System.out.println("Declaracion de variables LOCALES con asig"); :};

TYPES::= CHAR | FLOAT | STRING | INT | BOOOLEANF;

//posibles valores que puede tener una asignacion.
VALUE::= EXP_REL_LOG;
//===============================================================================Asignaciones y declaraciones End==================================================================


//===============================================================================Funcion==================================================================
//Declaracion de funciones.
FUNCTION_STATEMENT::= FUNC SEP INT SEP MAIN UNDERS LINE UNDERS {: System.out.println("Main"); :};
FUNCTION_STATEMENT::= FUNC SEP INT SEP IDENTIFIER UNDERS LINE UNDERS {: System.out.println("declaracion de funcion"); :};


INV_FUNC ::= IDENTIFIER PARENTA PARENTC {: System.out.println("Invocacion de funcion sin parametros."); :};
INV_FUNC ::= IDENTIFIER PARENTA PARAMS PARENTC {: System.out.println("Invocacion de funcion con parametros."); :};

PARAMS ::= PARAMETER COMA PARAMS;
PARAMS ::= PARAMETER;

PARAMETER ::= VALUE;

//Invocaciones de un array
INV_ARRAY ::= IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC;
DECLARRAY_WITH_VALUES ::= CHAR SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC EQ VALUE_LIST ENDLINE;
DECLARRAY_WITH_VALUES ::= INT SEP IDENTIFIER PARENTCA INTEGER_LITERAL PARENTCC EQ VALUE_LIST ENDLINE;
VALUE_LIST ::= VALUE COMA VALUE_LIST | VALUE;

//===============================================================================Funciones End==================================================================


//===============================================================================Estructuras de control==================================================================
//Declaracion de IF.
IF_STATEMENT ::= IF PARENTA EXP_REL_LOG PARENTC UNDERS LINE UNDERS ELSE_STATEMENT {: System.out.println("if statement"); :};
ELSE_STATEMENT ::= ELSE UNDERS LINE UNDERS | {: System.out.println("else statement"); :};
WHILE_STATEMENT ::= WHILE PARENTA EXP_REL_LOG PARENTC UNDERS LINE UNDERS {: System.out.println("WHILE statement"); :};
FOR_STATEMENT ::= FOR IDENTIFIER IN RANGE PARENTA EXP_ARIT PARENTC UNDERS LINE UNDERS {: System.out.println("FOR statement"); :};
SWITCH_STATEMENT ::= SWITCH PARENTA IDENTIFIER PARENTC UNDERS CASE_LIST UNDERS;
CASE_LIST ::= CASE EXP_ARIT SEP LINE CASE_LIST | DEFAULT SEP LINE;


//===============================================================================Estructuras de control End==================================================================
